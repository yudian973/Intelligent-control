     1                     ;=============================================================================
     2                     ;=============================================================================
     3                     ; Filename      : KEYSCAN.ASM
     4                     ; Author        : yu.wei
     5                     ; Company       : ELAN
     6                     ; VERSION       : 1.2
     7                     ; CRYSTAL       : 8MHZ
     8                     ; Creat date    : 2009/12/3
     9                     ; tool ver.     : WicePlus 2.7/eUIDE v1.01.01
    10                     ; descripition  : For EM78P520,used for airui
    11                     ;=============================================================================
    12                     ;=============================================================================
    13                     
    14                     ;---------------------------------------------------
    15                     keyscan.asm             EQU       keyscan.asm
    16                     include "keyscan.H"
     1            C        ;=============================================================================
     2            C        ;=============================================================================
     3            C        ; Filename      : KEYSCAN.ASM
     4            C        ; Author        : yu.wei
     5            C        ; Company       : ELAN
     6            C        ; VERSION       : 1.1
     7            C        ; CRYSTAL       : 8MHZ
     8            C        ; Creat date    : 2009/11/4
     9            C        ; tool ver.     : eUIDE
    10            C        ; descripition  : FOR_EM78P520,
    11            C        ;=============================================================================
    12            C        keyscan.h           EQU        keyscan.h
    13            C        
    14            C        
    15            C        ;----------------------------------------------------------------
    16       000A C        LeakresisTimeCNT    EQU        10     ; Leakresis time(default:20).T = LeakresisTimeCNT*[interrupt Time]
    17       0003 C        IOCheckRate         EQU        3   ; timer2 counter. Check IO when Time arrive 
    18            C        reg_acc             EQU        DataShiftCounter
    19       0000 C        ADC_FUNCTION        EQU        0    ; 0 -> IO_FUNCTION(default:0)
    20            C                                            ; 1 -> ADC_FUNCTION
    21            C        
    22            C        
    23            C        
    24            C        ;======================= key scan port define =========================
    25            C        X_KeyLine           EQU        PORT7
    26            C        X_LINE1             ==         X_KeyLine*16+4		;R74
    27            C        X_LINE2             ==         X_KeyLine*16+5		;R73
    28            C        X_LINE3             ==         X_KeyLine*16+6		;R72
    29            C        X_LINE4             ==         X_KeyLine*16+7		;R71
    30            C        
    31            C        X_Keyrow            EQU        PORT9
    32            C        X_ROW1              ==         X_Keyrow*16+7		;R97
    33            C        X_ROW2              ==         X_Keyrow*16+6		;R96
    34            C        X_ROW3              ==         X_Keyrow*16+5		;R95
    35            C        X_ROW4              ==         X_Keyrow*16+4		;R94
    36            C        
    37            C        ;
    38       0007 C        Reference           ==         7          ;port87
    39       0006 C        Leakresis           ==         6          ;port86
    40       0000 C        LeftYAxis           ==         0          ;port90  LY
    41       0001 C        LeftXAxis           ==         1          ;port91  LX
    42       0002 C        RightYAxis          ==         2          ;port92  RY
    43       0003 C        RightXAxis          ==         3          ;port93  RX
    44            C        
    45            C        ;------------------------ Define form SCH ----------------------------
    46       000F C        _Directions         EQU        0B00001111 ;Port83 Port82 Port81 Port80
    47            C        
    48       0003 C        _UP                 ==         3    ;Port83
    49       0002 C        _DOWN               ==         2    ;Port82
    50       0001 C        _LEFT               ==         1    ;Port81
    51       0000 C        _RIGHT              ==         0    ;Port80
    52            C        
    53            C        ;--------------------------------------------------
    54       0007 C        _A                  ==         7    ;Port97
    55       0006 C        _B                  ==         6    ;Port96
    56       0005 C        _C                  ==         5    ;Port95
    57       0004 C        _D                  ==         4    ;Port94
    58            C        
    59       0007 C        _L1                 ==         7    ;Port97
    60       0006 C        _R1                 ==         6    ;Port96
    61       0005 C        _L2                 ==         5    ;Port95
    62       0004 C        _R2                 ==         4    ;Port94
    63            C        
    64       0007 C        _SELECT             ==         7    ;Port97
    65       0006 C        _START              ==         6    ;Port96
    66       0007 C        _LSW                ==         7    ;Port97
    67       0004 C        _RSW                ==         4    ;Port94
    68            C        
    69       0005 C        _MODE               ==         5    ;Port95
    70       0004 C        _MACRO              ==         4    ;Port94
    71       0006 C        _TEST1              ==         6    ;Port96
    72       0005 C        _TEST2              ==         5    ;Port95
    73            C        
    74            C        ;----------------- Define by data -------------------
    75       0000 C        A_1                 ==         0    ;DataE
    76       0001 C        B_2                 ==         1
    77       0002 C        C_3                 ==         2
    78       0003 C        D_4                 ==         3
    79       0004 C        L1_5                ==         4
    80       0005 C        R1_6                ==         5
    81       0006 C        L2_7                ==         6
    82       0007 C        R2_8                ==         7
    83            C        
    84       0000 C        SELECT_9            ==         0    ;DataF
    85       0001 C        START_10            ==         1
    86       0002 C        LSW_11              ==         2
    87       0003 C        RSW_12              ==         3
    88       0004 C        MODE_13             ==         4
    89       0005 C        MACRO_14            ==         5
    90       0006 C        TEST1_15            ==         6
    91       0007 C        TEST2_16            ==         7
    92            C        
    93            C        
    94            C        ;=============== Connect key scan ======================
    95       00B4 C        KeyPressTime                EQU    180
    96       003C C        KeyScanTime                 EQU    60
    97       001E C        CrossingTime                EQU    30
    98       0002 C        KeyScanTimeCNT_default      EQU    2     
    99            C        
   100            C        
   101            C        
   102            C        
   103            C        
    17                     
    18                     ifndef EM78CtrlIns.H
    19                     include "D:\include\EM78xx\EM78CtrlIns.H"
     1            C        /*****************************************************************
     2            C        * Filename     :  EM78CTRLINS.H
     3            C        * Author       :  yu.wei
     4            C        * Company      :  ELAN
     5            C        * VERSION      :  1.0
     6            C        * Creat date   :  2009/2
     7            C        * tool ver.    :  WicePlus II/eUIDE
     8            C        * Description  :  instruction aggregate
     9            C        *****************************************************************/
    10            C        ;------------------------------------------------------
    11            C        EM78CtrlIns.H    EQU         EM78CtrlIns.H
    12            C        
    13            C        ;-------------------------------------------------------
    14            C        
    15            C        ;***********************************************************
    16            C        ;Î»²Ù×÷Ààºê
    17            C        ;***********************************************************
    18            C        ; reg.bit exchange
    19            C        ;========================================
    20            C        COM MACRO REG,BIT
    21            C        	IF        BIT == 0
    22            C        		MOV        A,@0B00000001
    23            C        		XOR        REG,A
    24            C        	ELSEIF    BIT == 1
    25            C        		MOV        A,@0B00000010
    26            C        		XOR        REG,A
    27            C        	ELSEIF    BIT == 2
    28            C        		MOV        A,@0B00000100
    29            C        		XOR        REG,A
    30            C        	ELSEIF    BIT == 3
    31            C        		MOV        A,@0B00001000
    32            C        		XOR        REG,A
    33            C        	ELSEIF    BIT == 4
    34            C        		MOV        A,@0B00010000
    35            C        		XOR        REG,A
    36            C        	ELSEIF    BIT == 5
    37            C        		MOV        A,@0B00100000
    38            C        		XOR        REG,A
    39            C        	ELSEIF    BIT == 6
    40            C        		MOV        A,@0B01000000
    41            C        		XOR        REG,A
    42            C        	ELSEIF    BIT == 7
    43            C        		MOV        A,@0B10000000
    44            C        		XOR        REG,A
    45            C        	ELSE
    46            C        		MESSAGE    "BIT select ERROR"
    47            C        	ENDIF
    48            C        ENDM
    49            C        
    50            C        ;===============================================
    51            C        ; TO reg.bit1 = reg2.bit2
    52            C        ;================================================
    53            C        MOVB MACRO REG1,BIT1,REG2,BIT2
    54            C        	JBS       REG2,BIT2
    55            C        	BC        REG1,BIT1
    56            C        	JBC       REG2,BIT2
    57            C        	BS        REG1,BIT1
    58            C        ENDM
    59            C        
    60            C        ;===============================================
    61            C        ; TO reg1.bit1 = /reg2.bit2
    62            C        ;===============================================
    63            C        MOVBCPL MACRO REG1,BIT1,REG2,BIT2
    64            C        	JBS       REG2,BIT2
    65            C        	BS        REG1,BIT1
    66            C        	JBC       REG2,BIT2
    67            C        	BC        REG1,BIT1
    68            C        ENDM
    69            C        
    70            C        ;===============================================
    71            C        ; TO REG1=@DATA
    72            C        ;===============================================
    73            C        MOV MACRO REG,@DATA
    74            C        	MOV       A,@DATA
    75            C        	MOV       REG,A
    76            C        ENDM
    77            C        
    78            C        ;===============================================
    79            C        ; TO REG1=REG2
    80            C        ;===============================================
    81            C        MOV MACRO REG1,REG2
    82            C        	MOV       A,REG2
    83            C        	MOV       REG1,A
    84            C        ENDM
    85            C        
    86            C        
    87            C        
    88            C        ;***********************************************************
    89            C        ;Ìõ¼þ·ÖÖ§½á¹¹Ààºê
    90            C        ;***********************************************************
    91            C        ;===============================================
    92            C        ;decrement reg and jump when not zero
    93            C        ;================================================
    94            C        DJNZ MACRO REG,ADDRESS
    95            C        	DJZ       REG
    96            C        	JMP       ADDRESS
    97            C        ENDM
    98            C        
    99            C        ;=====================================================
   100            C        ; INC reg and jump when not zero
   101            C        ;=====================================================
   102            C        IJNZ MACRO REG,ADDRESS
   103            C        	JZ        REG
   104            C        	JMP       ADDRESS
   105            C        ENDM
   106            C        
   107            C        ;=====================================================
   108            C        ; compare and jump
   109            C        ; if reg1 > reg2 jump to add1
   110            C        ; if reg1 < reg2 jump to add2
   111            C        ;=====================================================
   112            C        CJLJG MACRO REG1,REG2,ADD1,ADD2
   113            C        	MOV       A,REG2
   114            C        	SUB       A,REG1
   115            C        	JBS       0X03,0 ;R3==0X03
   116            C        	JMP       ADD1
   117            C        	JBS       0X03,2
   118            C        	JMP       ADD2
   119            C        ENDM
   120            C        
   121            C        ;=====================================================
   122            C        ; compare and jump if in range
   123            C        ; if @LITE1 <= REG <= @LITE2 jump to ADDR
   124            C        ;=====================================================
   125            C        CJIN MACRO REG,@LITE1,@LITE2,ADDR
   126            C        	MOV       A,REG
   127            C        	ADD       A,@255-LITE2
   128            C        	ADD       A,@LITE2-LITE1+1
   129            C        	JBC       0X03,0
   130            C        	JMP       ADDR
   131            C        ENDM
   132            C        
   133            C        ;=====================================================
   134            C        ; COMPARE AND JUMP IF OUT RANGE
   135            C        ; if REG > @LITE2 or REG < @LITE1 jump to ADDR
   136            C        ;=====================================================
   137            C        CJOUT MACRO REG,@LITE1,@LITE2,ADDR
   138            C        	MOV       A,REG
   139            C        	ADD       A,@255-LITE2
   140            C        	ADD       A,@LITE2-LITE1+1
   141            C        	JBS       0X03,0
   142            C        	JMP       ADDR
   143            C        ENDM
   144            C        
   145            C        ;=====================================================
   146            C        ; compare and jump if REG1 > REG2
   147            C        ;=====================================================
   148            C        CJG       MACRO REG1,REG2,ADDRESS
   149            C        	MOV       A,REG1
   150            C        	SUB       A,REG2
   151            C        	JBS       0X03,0
   152            C        	JMP       ADDRESS
   153            C        ENDM
   154            C        
   155            C        ;=====================================================
   156            C        ; compare and jump if REG1 >= REG2
   157            C        ;=====================================================
   158            C        CJGE MACRO REG1,REG2,ADDRESS
   159            C        	MOV       A,REG2
   160            C        	SUB       A,REG1
   161            C        	JBC       0X03,0
   162            C        	JMP       ADDRESS
   163            C        ENDM
   164            C        
   165            C        ;=====================================================
   166            C        ; compare and jump if REG1 < REG2
   167            C        ;=====================================================
   168            C        CJL MACRO REG1,REG2,ADDRESS
   169            C        	MOV       A,REG2
   170            C        	SUB       A,REG1
   171            C        	JBS       0X03,0
   172            C        	JMP       ADDRESS
   173            C        ENDM
   174            C        
   175            C        ;=====================================================
   176            C        ; compare and jump if REG1 <= REG2
   177            C        ;=====================================================
   178            C        CJLE MACRO REG1,REG2,ADDRESS
   179            C        	MOV       A,REG1
   180            C        	SUB       A,REG2
   181            C        	JBC       0X03,0
   182            C        	JMP       ADDRESS
   183            C        ENDM
   184            C        
   185            C        ;=====================================================
   186            C        ; compare and jump if REG1 = REG2
   187            C        ;=====================================================
   188            C        CJE MACRO REG1,REG2,ADDRESS
   189            C        	MOV       A,REG2
   190            C        	SUB       A,REG1
   191            C        	JBC       0X03,2
   192            C        	JMP       ADDRESS
   193            C        ENDM
   194            C        
   195            C        ;=====================================================
   196            C        ; compare and jump if REG1 = @DATA jmp to ADDRESS
   197            C        ;=====================================================
   198            C        CJE MACRO REG,@DATA,ADDRESS
   199            C        	MOV       A,REG
   200            C        	SUB       A,@DATA
   201            C        	JBC       0X03,2
   202            C        	JMP       ADDRESS
   203            C        ENDM
   204            C        
   205            C        ;=====================================================
   206            C        ; compare and jump if REG1=REG2=@DATA jmp to ADDRESS
   207            C        ;=====================================================
   208            C        CJE MACRO REG1,REG2,@DATA,ADDRESS
   209            C        	MOV       A,REG2
   210            C        	SUB       A,REG1
   211            C        	JBS       0X03,2
   212            C        	JMP       $_CJE_DONE
   213            C        	MOV       A,REG1
   214            C        	SUB       A,@DATA
   215            C        	JBC       0X03,2
   216            C        	JMP       ADDRESS
   217            C        $_CJE_DONE:
   218            C        ENDM
   219            C        
   220            C        ;=====================================================
   221            C        ; compare and jump if REG1 <> REG2
   222            C        ;=====================================================
   223            C        CJNE MACRO REG1,REG2,ADDRESS
   224            C        	MOV       A,REG2
   225            C        	SUB       A,REG1
   226            C        	JBS       0X03,2
   227            C        	JMP       ADDRESS
   228            C        ENDM
   229            C        
   230            C        ;=====================================================
   231            C        ;compare and jump if REG = 0 JMP ADDRESS
   232            C        ;=====================================================
   233            C        CJZ MACRO REG,ADDRESS
   234            C        	MOV       REG,REG
   235            C        	JBC       0X03,2
   236            C        	JMP       ADDRESS
   237            C        ENDM
   238            C        
   239            C        ;=====================================================
   240            C        ; compare and jump if REG <> 0
   241            C        ;=====================================================
   242            C        CJNZ MACRO REG,ADDRESS
   243            C        	MOV       REG,REG
   244            C        	JBS       0X03,2
   245            C        	JMP       ADDRESS
   246            C        ENDM
   247            C        
   248            C        ;=====================================================
   249            C        ; compare and jump if REG.BIT = 0
   250            C        ;=====================================================
   251            C        CJBC MACRO REG,BIT,ADDRESS
   252            C        	JBS       REG,BIT
   253            C        	JMP       ADDRESS
   254            C        ENDM
   255            C        
   256            C        ;=====================================================
   257            C        ; compare and jump if REG.BIT = 1
   258            C        ;=====================================================
   259            C        CJBS MACRO REG,BIT,ADDRESS
   260            C        	JBC       REG,BIT
   261            C        	JMP       ADDRESS
   262            C        ENDM
   263            C        
   264            C        ;=====================================================
   265            C        ; compare and jump if REG.BIT = 0 JMP ADDRESS1
   266            C        ;                  if REG.BIT = 1 JMP ADDRESS2
   267            C        ;=====================================================
   268            C        CJBCS MACRO REG,BIT,ADDRESS1,ADDRESS2
   269            C        	JBC       REG,BIT
   270            C        	JMP       ADDRESS1
   271            C        	JBS       REG,BIT
   272            C        	JMP       ADDRESS2
   273            C        ENDM
   274            C        
   275            C        
   276            C        
   277            C        
   278            C        
   279            C        ;***********************************************************
   280            C        ;ÖÐ¶ÏÑ¹Õ»Óë³öÕ»Ààºê
   281            C        ;***********************************************************
   282            C        ;===============================================
   283            C        ; Ñ¹Õ»³ÌÐò
   284            C        ; ËµÃ÷:ÖÐ¶ÏÈë¿Úµ÷ÓÃ´Ë³ÌÐò,½«ACC,R3Ñ¹Õ»
   285            C        ; A      -> A_TEMP
   286            C        ; RSR    -> RSR_TEMP
   287            C        ; STATUS -> STATUS_TEMP
   288            C        ;================================================
   289            C        PUSH MACRO
   290            C        	MOV                 A_TEMP,A       ;A_TEMP,A         ;SAVE A
   291            C        	SWAP                A_TEMP         ;A_TEMP
   292            C        	SWAPA               0X03           ;STATUS           ;SAVE STATUS(R3)
   293            C        	MOV                 STATUS_TEMP,A  ;STATUS_TEMP,A
   294            C        IFDEF EM78P510.H
   295            C        	SWAPA               0X05           ;RSR              ;SAVE RSR(R4)
   296            C        	MOV                 RSR_TEMP,A     ;RSR_TEMP,A
   297            C        ELSE
   298            C        	SWAPA               0X04           ;RSR              ;SAVE RSR(R4)
   299            C        	MOV                 RSR_TEMP,A     ;RSR_TEMP,A
   300            C        ENDIF
   301            C        	CLR                 0X03           ;STATUS           ;SELECT PAGE0
   302            C        ENDM
   303            C        
   304            C        ;---------------------------------------
   305            C        POP MACRO
   306            C        	SWAPA               STATUS_TEMP    ;STATUS_TEMP    ;R3
   307            C        	MOV                 0X03,A         ;STATUS,A
   308            C        IFDEF EM78P510.H
   309            C        	SWAPA               RSR_TEMP       ;RSR_TEMP       ;R4
   310            C        	MOV                 0X05,A         ;RSR,A
   311            C        ELSE
   312            C        	SWAPA               RSR_TEMP       ;RSR_TEMP       ;R4
   313            C        	MOV                 0X04,A         ;RSR,A
   314            C        ENDIF
   315            C        	SWAPA               A_TEMP         ;A_TEMP
   316            C        ENDM
   317            C        
   318            C        ;========================== EM78P520 =================================
   319            C        PUSH MACRO A_Temp,STATUS_Temp,RSR_Temp,@BankSel,Ax_Temp,STATUSx_Temp,RSRx_Temp
   320            C        	MOV                 A_TEMP,A       ;A_TEMP,A         ;SAVE A
   321            C        	SWAP                A_TEMP         ;A_TEMP
   322            C        	SWAPA               0X03           ;STATUS           ;SAVE STATUS(R3)
   323            C        	MOV                 STATUS_TEMP,A  ;STATUS_TEMP,A
   324            C        	SWAPA               0X05           ;RSR              ;SAVE RSR(R4)
   325            C        	MOV                 RSR_TEMP,A     ;RSR_TEMP,A
   326            C        	CLR                 0X03           ;STATUS           ;SELECT PAGE0
   327            C        
   328            C        	BANK                @BankSel
   329            C        	MOV                 A,A_TEMP
   330            C        	MOV                 Ax_Temp,A
   331            C        	MOV                 A,STATUS_Temp
   332            C        	MOV                 STATUSx_Temp,A
   333            C        	MOV                 A,RSR_Temp
   334            C        	MOV                 RSRx_Temp,A
   335            C        ENDM
   336            C        
   337            C        ;---------------------------------------
   338            C        POP MACRO A_Temp,STATUS_Temp,RSR_Temp,@BankSel,Ax_Temp,STATUSx_Temp,RSRx_TEMP
   339            C        	BANK                @BankSel
   340            C        	MOV                 A,Ax_Temp
   341            C        	MOV                 A_TEMP,A
   342            C        	MOV                 A,STATUSx_Temp
   343            C        	MOV                 STATUS_Temp,A
   344            C        	MOV                 A,RSR_TEMP
   345            C        	MOV                 RSRx_TEMP,A
   346            C        
   347            C        	SWAPA               STATUS_TEMP    ;STATUS_TEMP    ;R3
   348            C        	MOV                 0X03,A         ;STATUS,A
   349            C        	SWAPA               RSR_TEMP       ;RSR_TEMP       ;R4
   350            C        	MOV                 0X05,A         ;RSR,A
   351            C        	SWAPA               A_TEMP         ;A_TEMP
   352            C        ENDM
   353            C        
   354            C        ;***********************************************************
   355            C        ; ¿çÒ³µ÷ÓÃÓëÌø×ªÀàºê
   356            C        ;***********************************************************
   357            C        ;===================================================
   358            C        ; Ñ¡Ôñ³ÌÐòÒ³Ãæ
   359            C        ;===================================================
   360            C        PAGE MACRO NUM
   361            C        IFDEF     EM78P510.H
   362            C        	ERROR
   363            C        	MESSAGE "ERROR:THe EM78510 Not Support PAGE insruction but used LCALL or LJMP"
   364            C        	MESSAGE "can not use the instrction PAGE"
   365            C        ELSE
   366            C        	IF        NUM == 0
   367            C                      BC        0X03,7
   368            C                      BC        0X03,6
   369            C                      BC        0X03,5
   370            C        	ELSEIF    NUM == 1
   371            C        	          BC        0X03,7
   372            C        	          BC        0X03,6
   373            C        	          BS        0X03,5
   374            C        	ELSEIF    NUM == 2
   375            C        	          BC        0X03,7
   376            C        	          BS        0X03,6
   377            C        	          BC        0X03,5
   378            C        	ELSEIF    NUM == 3
   379            C        	          BC        0X03,7
   380            C        	          BS        0X03,6
   381            C        	          BS        0X03,5
   382            C        	ELSEIF    NUM == 4
   383            C        	          BS        0X03,7
   384            C        	          BC        0X03,6
   385            C        	          BC        0X03,5
   386            C        	ELSEIF    NUM == 5
   387            C        	          BS        0X03,7
   388            C        	          BC        0X03,6
   389            C        	          BS        0X03,5
   390            C        	ELSEIF    NUM == 6
   391            C        	          BS        0X03,7
   392            C        	          BS        0X03,6
   393            C        	          BC        0X03,5
   394            C        	ELSEIF    NUM == 7
   395            C        	          BS        0X03,7
   396            C        	          BS        0X03,6
   397            C        	          BS        0X03,5
   398            C        	ELSE
   399            C        	          MESSAGE "WARRING: don't have specify page"
   400            C        	ENDIF
   401            C        ENDIF
   402            C        
   403            C        ENDM
   404            C        
   405            C        ;===================================================%
   406            C        ; ÖÇÄÜ¿çÒ³µ÷ÓÃ
   407            C        ;===================================================
   408            C        FCALL MACRO ADDRESS
   409            C        IFDEF     EM78P510.H
   410            C        	ERROR
   411            C        	MESSAGE "ERROR:THe EM78510 Not Support PAGE insruction but used LCALL or LJMP"
   412            C        	MESSAGE "can not use the instrction FCALL"
   413            C        ELSE
   414            C        	IF        ADDRESS/0X400 == $/0X400
   415            C        	          CALL      ADDRESS
   416            C        	ELSE
   417            C        	          PAGE      ADDRESS/0X400
   418            C        	          CALL      ADDRESS%0X400
   419            C        	          PAGE      $/0X400
   420            C        	ENDIF
   421            C        ENDIF
   422            C        ENDM
   423            C        
   424            C        ;===================================================
   425            C        ; ¿çÒ³µ÷ÓÃ
   426            C        ; Èë¿Ú:NUM = ±»µ÷ÓÃ³ÌÐòÒ³ºÅ,  ADDRESS =  B±»µ÷ÓÃ³ÌÐòµØÖ·
   427            C        ;===================================================
   428            C        FCALL MACRO NUM,ADDRESS
   429            C        IFDEF     EM78P510.H
   430            C        	ERROR
   431            C        	MESSAGE "ERROR:THe EM78510 Not Support PAGE insruction but used LCALL or LJMP"
   432            C        	MESSAGE "can not use the instrction FCALL"
   433            C        ELSE
   434            C        	PAGE      NUM
   435            C        	CALL      ADDRESS
   436            C        	PAGE      $/0X400
   437            C        ENDIF
   438            C        ENDM
   439            C        
   440            C        ;===================================================
   441            C        ; ÖÇÄÜ¿çÒ³Ìø×ª
   442            C        ;===================================================
   443            C        FJMP MACRO ADDRESS
   444            C        IFDEF     EM78P510.H
   445            C        	ERROR
   446            C        	MESSAGE "ERROR:THe EM78510 Not Support PAGE insruction but used LCALL or LJMP"
   447            C        	MESSAGE "can not use the instrction FJMP"
   448            C        ELSE
   449            C        	IF        ADDRESS/0X400 == $/0X400
   450            C        	          JMP       ADDRESS
   451            C        	ELSE
   452            C        	          PAGE      ADDRESS/0X400
   453            C        	          JMP       ADDRESS%0X400
   454            C        	ENDIF
   455            C        ENDIF
   456            C        ENDM
   457            C        
   458            C        ;===================================================
   459            C        ;¿çÒ³Ìø×ª
   460            C        ; Èë¿Ú:NUM = ±»µ÷ÓÃ³ÌÐòÒ³ºÅ,  ADDRESS =  B±»µ÷ÓÃ³ÌÐòµØÖ·
   461            C        ;===================================================
   462            C        FJMP MACRO NUM,ADDRESS
   463            C        IFDEF     EM78P510.H
   464            C        	ERROR
   465            C        	MESSAGE "ERROR:THe EM78510 Not Support PAGE insruction but used LCALL or LJMP"
   466            C        	MESSAGE "can not use the instrction FJMP"
   467            C        ELSE
   468            C        	PAGE      NUM
   469            C        	JMP       ADDRESS
   470            C        ENDIF
   471            C        ENDM
   472            C        
   473            C        ;===================================================
   474            C        ; Ñ¡Ôñ³ÌÐòÒ³Ãæ
   475            C        ;===================================================
   476            C        BANK MACRO @NUM
   477            C        IFDEF EM78M611.H
   478            C        	IF        @NUM == 0
   479            C                      BC        0X04,7
   480            C                      BC        0X04,6
   481            C        	ELSEIF    @NUM == 1
   482            C        	          BC        0X04,7
   483            C        	          BS        0X04,6
   484            C        	ELSEIF    @NUM == 2
   485            C        	          BS        0X04,7
   486            C        	          BC        0X04,6
   487            C        	ELSEIF    @NUM == 3
   488            C        	          BS        0X04,7
   489            C        	          BS        0X04,6
   490            C        	ENDIF
   491            C        
   492            C        ELSEIFDEF EM78M612.H
   493            C        	IF        @NUM == 0
   494            C                      BC        0X04,6
   495            C        	ELSEIF    @NUM == 1
   496            C        	          BS        0X04,6
   497            C        	ENDIF
   498            C        ELSE
   499            C        	MESSAGE "the MCU defualt have 'bank' intruction"
   500            C        ENDIF
   501            C        ENDM
   502            C        
   503            C        
   504            C        
   505            C        ;*******************************************
   506            C        ; RAM clear function
   507            C        ; [ELSE]: default the MCU have four bank
   508            C        ; others: xx.h must be define in "xx.h"
   509            C        ;*******************************************
   510            C        ClrRamBank MACRO
   511            C        IFDEF EM78P520.H
   512            C        	MOV     A, @0XE0        ; ÇåRAM ³õÊ¼µØÖ·
   513            C        	MOV     R4, A           ;
   514            C        	CLR     BSR
   515            C        	;INC     BSR            ; BANK 0 is used for exchange reg(FIFO)
   516            C        ;CLEAR_RAM_LOOP_P510:
   517            C        	WDTC
   518            C        	CLR     R0
   519            C        	INC     R4
   520            C        	MOV     A, R4
   521            C        	AND     A, @0X3F
   522            C        	JBS     R3, Z
   523            C        	JMP     $-5            ; CLEAR_RAM_LOOP_P510
   524            C        	INC     BSR
   525            C        	MOV     A, BSR         ; Ñ¡ÔñBANK0 (BSR == 0X05)
   526            C        	AND     A, @0X07
   527            C        	BS      R4, 5
   528            C        	BS      R4, 6
   529            C        	JBS     R3, 2
   530            C        	JMP     $-13           ; CLEAR_RAM_LOOP_P510
   531            C        	CLR     R4
   532            C        	CLR     BSR
   533            C        	BS      R4,6
   534            C        
   535            C        ELSEIFDEF EM78M611.H
   536            C        	CLR     RC
   537            C        	CLR     RD
   538            C        	CLR     0X10
   539            C        	MOV     A,@0X2F
   540            C        	MOV     0X10,A
   541            C        
   542            C        	MOV     A,@0X11
   543            C        	MOV     RSR,A
   544            C        ;CLRLOOPU1:
   545            C        	CLR     R0
   546            C        	INC     RSR
   547            C        	DJZ     0X10
   548            C        	JMP     $-3        ;CLRLOOPU1
   549            C            CLR     R0
   550            C        	MOV     A,@0X20
   551            C        	MOV     0X10,A
   552            C        	MOV     A,@0X60
   553            C        	MOV     RSR,A
   554            C        
   555            C        ;CLRLOOPU2:
   556            C        	CLR     R0
   557            C        	INC     RSR
   558            C        	DJZ     0X10
   559            C        	JMP     $-3             ;CLRLOOPU2
   560            C        
   561            C        	CLR     R0
   562            C        	MOV     A,@0X20
   563            C        	MOV     0X10,A
   564            C        	MOV     A,@0XA0
   565            C        	MOV     RSR,A
   566            C        
   567            C        ;CLRLOOPU3:
   568            C        	CLR     R0
   569            C        	INC     RSR
   570            C        	DJZ     0X10
   571            C        	JMP     $-3            ;CLRLOOPU3
   572            C        	CLR     R0
   573            C        
   574            C        	MOV     A,@0X11
   575            C        	MOV     RD,A
   576            C        	CLR     RE
   577            C        	MOV     A,@1
   578            C        	MOV     RD,A
   579            C        	MOV     A,@0X00
   580            C        	MOV     RE,A
   581            C        	MOV     RE,A
   582            C        	MOV     RE,A
   583            C        	MOV     RE,A
   584            C        	MOV     RE,A
   585            C        	MOV     RE,A
   586            C        	MOV     RE,A
   587            C        	MOV     RE,A
   588            C        	BS      RC,5
   589            C        
   590            C        
   591            C        ELSEIFDEF EM78P447.H
   592            C         	MOV     A,@0x10
   593            C        	MOV     R4,A
   594            C        ;CLEAR_RAM_LOOP_P447:
   595            C        	CLR     R0
   596            C        	INC     R4
   597            C        	JBC     R4,6
   598            C        	BS      R4,5
   599            C        	JBC     R4,7
   600            C        	BS      R4,5
   601            C        	JBS     R3,Z
   602            C        	JMP     $-7            ; CLEAR_RAM_LOOP_P447:
   603            C        	CLR     R4
   604            C        
   605            C        ELSEIFDEF EM78P468.H
   606            C        	MOV     A,@0X10
   607            C        	MOV     RSR,A
   608            C        ;CLEAR_RAM_LOOP_P468:
   609            C        	CLR     R0
   610            C        	INC     RSR
   611            C        	JBC     RSR,6
   612            C        	BS      RSR,5
   613            C        	JBC     RSR,7
   614            C        	BS      RSR,5
   615            C        	JBS     STATUS,Z
   616            C        	JMP     $-7            ; CLEAR_RAM_LOOP_P468
   617            C        	CLR     RSR
   618            C        
   619            C        ELSEIFDEF EM78P458.H
   620            C                MOV     A,@0X10
   621            C                MOV     RSR,A
   622            C        ;CLEAR_RAM_LOOP_P458:
   623            C                CLR     R0
   624            C                INC     RSR
   625            C                JBC     RSR,6
   626            C                BS      RSR,5
   627            C                JBS     RSR,7
   628            C                JMP     $-5        ; CLEAR_RAM_LOOP_P458
   629            C                CLR     RSR
   630            C        
   631            C        ELSEIFDEF EM78P451.H
   632            C                MOV     A,@0X10
   633            C                MOV     RSR,A
   634            C        ;CLEAR_RAM_LOOP_P451:
   635            C                CLR     R0
   636            C                INC     RSR
   637            C                JBC     RSR,6
   638            C                BS      RSR,5
   639            C                JBC     RSR,7
   640            C                BS      RSR,5
   641            C                JBS     STATUS,Z
   642            C                JMP     $-7        ; CLEAR_RAM_LOOP_P451
   643            C        
   644            C        ELSE
   645            C        	MOV     A,@0x10        ; clear all ram bank
   646            C        	MOV     R4,A
   647            C        ;CLEAR_RAM_LOOP:
   648            C        	CLR     R0
   649            C        	INC     R4
   650            C        	JBC     R4,6
   651            C        	BS      R4,5
   652            C        	JBC     R4,7
   653            C        	BS      R4,5
   654            C        	JBS     R3,Z
   655            C        	JMP     $-7            ; CLEAR_RAM_LOOP:
   656            C        	CLR     R4
   657            C        	MESSAGE "Clear all RAM bank"
   658            C        ENDIF
   659            C        ENDM
   660            C        
   661            C        ;*******************************************
   662            C        ; RAM clear function
   663            C        ; [ELSE]: default the MCU have four bank
   664            C        ; others: xx.h must be define in "xx.h"
   665            C        ;*******************************************
   666            C        ClrCommRamBank MACRO
   667            C        	MOV                 A, @0X10                ; ÇåRAM ³õÊ¼µØÖ·
   668            C        	MOV                 R4, A
   669            C        CLEAR_10_1F_RAM_LOOP:
   670            C        	WDTC
   671            C        	CLR                 R0
   672            C        	INC                 R4
   673            C        	MOV                 A,@0B00111111
   674            C        	AND                 A,R4
   675            C        	SUB                 A,@0X1F
   676            C        	JBC                 R3,C
   677            C        	JMP                 CLEAR_10_1F_RAM_LOOP
   678            C        	CLR                 R4
   679            C        ENDM
   680            C        
   681            C        
    20                     endif
    21                     
    22                     ifndef EM78Math.H
    23                     include "D:\include\EM78xx\EM78Math.H"
     1            C        ;**********************************************************************;
     2            C        ; Title:        EM78Math Macros Define                                 ;
     3            C        ; Description:  The Maths for EM78x447xxx                              ;
     4            C        ; Company:      Elan Corp.Inc                                          ;
     5            C        ; Author:       Shenzhen 8Bit Tean                                     ;
     6            C        ; Date:         5/26/2004                                              ;
     7            C        ; Version:      1.0                                                    ;
     8            C        ;**********************************************************************
     9            C        ;----------------------------------------------------------------
    10            C        EM78Math.H      EQU     EM78Math.H
    11            C        
    12            C        
    13            C        ;----------------------------------------------------------------
    14            C        
    15            C        
    16            C        
    17            C        ;**********************************************************************;
    18            C        ; Title:       1 Byte Binary Code Transform BCD Code                   ;
    19            C        ; Description: Hundred Bigit Of Bcd Cade Storage In  Low Bigit  Of     ;
    20            C        ;              reg_acc3,Entries Bigit Of Bcd Cade Storage In High      ;
    21            C        ;              Bigit Of reg_acc2, Binary Data Storage In reg_acc1      ;
    22            C        ; Arithmetic:  BCD==100*a+10*b+c                                       ;
    23            C        ; Input:       reg_acc1                                                ;
    24            C        ; Output:      reg_acc3, reg_acc2                                      ;
    25            C        ; Variable Register:None                                               ;
    26            C        ; Register Changed: R3, 0 ;ACC                                         ;
    27            C        ;**********************************************************************;
    28            C        ;-----------------------------------------------------------------
    29            C        mBinToBcd1 MACRO reg_acc1, reg_acc3, reg_acc2
    30            C        ;
    31            C                CLR     reg_acc2        ;clear BCD data register
    32            C                CLR     reg_acc3
    33            C                MOV     A, reg_acc1
    34            C        $Bin_Bcd1:
    35            C                ADD     A, @156         ;subtract 100 from binary that is transform
    36            C                JBS     STATUS, C       ;borrow bigit?
    37            C                JMP     $Bin_Bcd2       ;borrow bigit jump to Bin_Bcd2
    38            C                INC     reg_acc3        ;if don't borrow bigit then hundred bigit adding 1
    39            C                JMP     $Bin_Bcd1       ;backing out
    40            C        $Bin_Bcd2:
    41            C                ADD     A, @100         ;ÓÐ½èÎ»£¬Ôò¼Ó»Ø±»¼õÈ¥µÄÊý100
    42            C                MOV     reg_acc1, A
    43            C        $Bin_Bcd3:
    44            C                ADD     A, @246         ;ÓàÏÂµÄ±»¼õÊýÔÙ¼õ10
    45            C                JBS     STATUS, C       ;ÓÐ½èÎ»Âð£¿
    46            C                JMP     $Bin_Bcd4       ;ÓÐ½èÎ»£¬ÔòÌø³ö
    47            C                INC     reg_acc2        ;ÎÞ½èÎ»£¬ÔòBCDÂëµÄÊ®Î»¼Ä´æÆ÷¼Ó1
    48            C                JMP     $Bin_Bcd3
    49            C        $Bin_Bcd4:
    50            C                ADD     A, @10          ;ÓÐ½èÎ»£¬Ôò¼Ó»Ø±»¼õÈ¥µÄÊý10
    51            C                SWAP    reg_acc2        ;½«BCDÂëµÄÊ®Î»´æµ½reg_acc2µÄ¸ß°ë×Ö½Ú
    52            C                ADD     reg_acc2, A     ;½«BCDÂëµÄ¸öÎ»´æµ½reg_acc2µÄµÍ°ë×Ö½Ú
    53            C                ENDM
    54            C        ;
    55            C        ;**********************************************************************;
    56            C        ; Title:       2 Byte Binary Code Transform BCD Code                   ;
    57            C        ; Description: Highest Bigit Of Bcd Storage In Low Byte Of reg_acc5,   ;
    58            C        ;              Lowest Bigit Of Bcd Storage In Low Byte Of reg_acc3,    ;
    59            C        ;              High Bigit Of Binary Storage In reg_acc1,               ;
    60            C        ;              Low Bigit Of Binart Storage In reg_acc2,                ;
    61            C        ; Input:       reg_acc1, reg_acc2                                      ;
    62            C        ; Output:      reg_acc3, reg_acc4, reg_acc5                            ;
    63            C        ; Variable Register:reg_acc, reg_accd                                  ;
    64            C        ; Register Changed: R3, 0; ACC                                         ;
    65            C        ; Status:      1                                                       ;
    66            C        ;**********************************************************************;
    67            C        ;
    68            C        mBinToBcd2 MACRO reg_acc2, reg_acc1, reg_acc5, reg_acc4, reg_acc3
    69            C        ;
    70            C                MOV     A, @16          ;Éè¶¨ÒÆÎ»×Ö½Ú³¤¶È(ÆäÖµ=byte*8)
    71            C                MOV     reg_acc, A
    72            C                CLR     reg_acc5        ;ÇåBCDÂë¼Ä´æÆ÷
    73            C                CLR     reg_acc4
    74            C                CLR     reg_acc3
    75            C                BC      STATUS, C       ;ÇåR3±êÖ¾Î»C
    76            C        $Bin_Bcd1:
    77            C                RLC     reg_acc1        ;×óÒÆ±»×ª»»µÄ×Ö½ÚµÄ×îµÍÎ»¼Ä´æÆ÷
    78            C                RLC     reg_acc2        ;×óÒÆ±»×ª»»µÄ×Ö½ÚµÄ×î¸ßÎ»¼Ä´æÆ÷
    79            C                RLC     reg_acc3        ;×óÒÆBCDÂëµÄ×îµÍÎ»¼Ä´æÆ÷
    80            C                RLC     reg_acc4
    81            C                RLC     reg_acc5        ;×óÒÆBCDÂëµÄ×î¸ßÎ»¼Ä´æÆ÷
    82            C                DJZ     reg_acc         ;ÒÆÎ»Íê³ÉÁËÂð£¿
    83            C                JMP     $Bin_Bcd2       ;Î´Íê£¬½øÐÐBCDÂëµ÷Õû
    84            C                JMP     $Bin_Bcd3       ;ÒÆÎ»Íê£¬Ìø³ö
    85            C        $Bin_Bcd2:
    86            C                MOV     A, reg_acc3     ;¶Ôreg_acc3½øÐÐBCDÂëµ÷Õû
    87            C                CALL    $bcdadj         ;µ÷BCDÂëµ÷Õû×Ó³ÌÐò
    88            C                MOV     reg_acc3, A     ;
    89            C                MOV     A, reg_acc4     ;¶Ôreg_acc4½øÐÐBCDÂëµ÷Õû
    90            C                CALL    $BCDADJ
    91            C                MOV     reg_acc4, A
    92            C                MOV     A, reg_acc5     ;¶Ôreg_acc5½øÐÐBCDÂëµ÷Õû
    93            C                CALL    $BCDADJ
    94            C                MOV     reg_acc5, A
    95            C                JMP     $Bin_Bcd1       ;·µ»Ø£¬¼ÌÐø½øÐÐÒÆÎ»´¦Àí
    96            C        ;-------BCD Code Adjust Subprogram---------------
    97            C        $BCDADJ:
    98            C                ADD     A, @51
    99            C                MOV     reg_accd, A
   100            C                JBS     reg_accd, 3
   101            C                ADD     A, @253
   102            C                JBS     reg_accd, 7
   103            C                ADD     A, @208
   104            C                RET
   105            C        $Bin_Bcd3:
   106            C                ENDM
   107            C        ;
   108            C        ;**********************************************************************;
   109            C        ; Title:      3 Byte Binary Code Transform Bcd Code                    ;
   110            C        ; Description:reg_acc7µÄ¸ß°ë×Ö½Ú´æ·ÅBCDÂëµÄ×î¸ßÎ»£¬                    ;
   111            C        ;             reg_acc4µÄµÍ°ë×Ö½Ú´æ·ÅBCDÂëµÄ×îµÍÎ»,                     ;
   112            C        ;             reg_acc3´æ·Å±»×ª»»×Ö½ÚµÄ×î¸ßÎ»£¬                         ;
   113            C        ;             reg_acc1´æ·Å±»×ª»»×Ö½ÚµÄ×îµÍÎ»¡£                         ;
   114            C        ; Input:      reg_acc1, reg_acc2, reg_acc3                             ;
   115            C        ; Output:     reg_acc4, reg_acc5, reg_acc6, reg_acc7                   ;
   116            C        ; Variable Register:reg_acc, reg_accd                                  ;
   117            C        ; Register Changed: R3, 0;ACC                                          ;
   118            C        ; stack:      1                                                        ;
   119            C        ;**********************************************************************;
   120            C        ;
   121            C        mBinToBcd3 MACRO reg_acc3, reg_acc2, reg_acc1, reg_acc7, reg_acc6, reg_acc5, reg_acc4
   122            C        ;
   123            C                MOV     A, @24          ;Éè¶¨ÒÆÎ»×Ö½Ú³¤¶È£¨ÆäÖµ=byte*8)
   124            C                MOV     reg_acc, A
   125            C                CLR     reg_acc4
   126            C                CLR     reg_acc5
   127            C                CLR     reg_acc6
   128            C                CLR     reg_acc7
   129            C                BC      STATUS, C       ;ÇåR3±êÖ¾Î»C
   130            C        $Bin_Bcd1:
   131            C                RLC     reg_acc1        ;×óÒÆ±»×ª»»×Ö½ÚÊýµÄ×îµÍÎ»¼Ä´æÆ÷
   132            C                RLC     reg_acc2
   133            C                RLC     reg_acc3        ;×óÒÆ±»×ª»»×Ö½ÚÊýµÄ×î¸ßÎ»¼Ä´æÆ÷
   134            C                RLC     reg_acc4        ;×óÒÆBCDÂëµÄ×îµÍÎ»¼Ä´æÆ÷
   135            C                RLC     reg_acc5
   136            C                RLC     reg_acc6
   137            C                RLC     reg_acc7        ;×óÒÆBCDÂëµÄ×î¸ßÎ»¼Ä´æÆ÷
   138            C                DJZ     reg_acc         ;ÒÆÎ»Íê³ÉÁËÂð£¿
   139            C                JMP     $Bin_Bcd2       ;Î´Íê£¬½øÐÐBCDÂëµ÷Õû
   140            C                JMP     $Bin_Bcd3       ;ÒÆÎ»Íê£¬Ìø³ö
   141            C        $Bin_Bcd2:
   142            C                MOV     A, reg_acc4     ;¶Ôreg_acc4½øÐÐBCDÂëµ÷Õû
   143            C                CALL    $BCDADJ         ;µ÷BCDÂëµ÷Õû×Ó³ÌÐò
   144            C                MOV     reg_acc4, A
   145            C                MOV     A, reg_acc5     ;¶Ôreg_acc5½øÐÐBCDÂëµ÷Õû
   146            C                CALL    $BCDADJ
   147            C                MOV     reg_acc5, A
   148            C                MOV     A, reg_acc6     ;¶Ôreg_acc6½øÐÐBCDÂëµ÷Õû
   149            C                CALL    $BCDADJ
   150            C                MOV     reg_acc6, A
   151            C                MOV     A, reg_acc7     ;¶Ôreg_acc7½øÐÐBCDÂëµ÷Õû
   152            C                CALL    $BCDADJ
   153            C                MOV     reg_acc7, A
   154            C                JMP     $Bin_Bcd1       ;ÒÆÎ»Î´Íê£¬·µ»Ø£¬¼ÌÐø½øÐÐÒÆÎ»´¦Àí
   155            C        ;-------BCD Code Adjust Subprogram---------------
   156            C        $BCDADJ:
   157            C                ADD     A, @51
   158            C                MOV     reg_accd, A
   159            C                JBS     reg_accd, 3
   160            C                ADD     A, @253
   161            C                JBS     reg_accd, 7
   162            C                ADD     A, @208
   163            C                RET
   164            C        $Bin_Bcd3:
   165            C                ENDM
   166            C        ;
   167            C        ;**********************************************************************;
   168            C        ; Title:      4 Byte Binary Code Transform Bcd Code                    ;
   169            C        ; Description:reg_acc9µÄ¸ß°ë×Ö½Ú´æ·ÅBCDÂëµÄ×î¸ßÎ»£¬                    ;
   170            C        ;             reg_acc5µÄµÍ°ë×Ö½Ú´æ·ÅBCDÂëµÄ×îµÍÎ»£¬                    ;
   171            C        ;             reg_acc4´æ·Å±»×ª»»×Ö½ÚµÄ×î¸ßÎ»£¬                         ;
   172            C        ;             reg_acc1´æ·Å±»×ª»»×Ö½ÚµÄ×îµÍÎ»?                          ;
   173            C        ; Arithmetic:                                                          ;
   174            C        ; Input:      reg_acc1, reg_acc2, reg_acc3, reg_acc4                   ;
   175            C        ; Output:     reg_acc5, reg_acc6, reg_acc7, reg_acc8, reg_acc9         ;
   176            C        ; Variable Register:reg_acc, reg_accd                                  ;
   177            C        ; Register Changed: R3, 0; ACC                                         ;
   178            C        ; stack:      1                                                        ;
   179            C        ;**********************************************************************;
   180            C        ;
   181            C        mBinToBcd4 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc9, reg_acc8, reg_acc7, reg_acc6, reg_acc5
   182            C        ;
   183            C                MOV     A,  @32         ;Éè¶¨ÒÆÎ»×Ö½Ú³¤¶È(ÆäÖµ=byte*8)
   184            C                MOV     reg_acc, A
   185            C                CLR     reg_acc5        ;ÇåBCDÂë¼Ä´æÆ÷
   186            C                CLR     reg_acc6
   187            C                CLR     reg_acc7
   188            C                CLR     reg_acc8
   189            C                CLR     reg_acc9
   190            C                BC      STATUS, C       ;ÇåR3±êÖ¾Î»C
   191            C        $Bin_Bcd1:
   192            C                RLC     reg_acc1        ;×óÒÆ±»×ª»»×Ö½ÚÊýµÄ×îµÍÎ»¼Ä´æÆ÷
   193            C                RLC     reg_acc2
   194            C                RLC     reg_acc3
   195            C                RLC     reg_acc4        ;×óÒÆ±»×ª»»×Ö½ÚÊýµÄ×î¸ßÎ»¼Ä´æÆ÷
   196            C                RLC     reg_acc5
   197            C                RLC     reg_acc6        ;×óÒÆBCDÂëµÄ×îµÍÎ»¼Ä´æÆ÷
   198            C                RLC     reg_acc7
   199            C                RLC     reg_acc8
   200            C                RLC     reg_acc9        ;×óÒÆBCDÂëµÄ×î¸ßÎ»¼Ä´æÆ÷
   201            C                DJZ     reg_acc         ;ÒÆÎ»Íê³ÉÁËÂð£¿
   202            C                JMP     $Bin_Bcd2       ;Î´Íê£¬½øÐÐBCDÂëµ÷Õû
   203            C                JMP     $Bin_Bcd3       ;ÒÆÎ»Íê£¬Ìø³ö
   204            C        $Bin_Bcd2:
   205            C                MOV     A, reg_acc5     ;¶Ôreg_acc5½øÐÐBCDÂëµ÷Õû
   206            C                CALL    $BCDADJ         ;µ÷BCDÂëµ÷Õû×Ó³ÌÐò
   207            C                MOV     reg_acc5, A
   208            C                MOV     A, reg_acc6     ;¶Ôreg_acc6½øÐÐBCDÂëµ÷Õû
   209            C                CALL    $BCDADJ
   210            C                MOV     reg_acc6, A
   211            C                MOV     A, reg_acc7     ;¶Ôreg_acc7½øÐÐBCDÂëµ÷Õû
   212            C                CALL    $BCDADJ
   213            C                MOV     reg_acc7, A
   214            C                MOV     A, reg_acc8     ;¶Ôreg_acc8½øÐÐBCDÂëµ÷Õû
   215            C                CALL    $BCDADJ
   216            C                MOV     reg_acc8, A
   217            C                MOV     A, reg_acc9     ;¶Ôreg_acc9½øÐÐBCDÂëµ÷Õû
   218            C                CALL    $BCDADJ
   219            C                MOV     reg_acc9, A
   220            C                JMP     $Bin_Bcd1       ;ÒÆÎ»Î´Íê³É£¬·µ»Ø£¬¼ÌÐø½øÐÐÒÆÎ»´¦Àí
   221            C        ;-------BCD Code Adjust Subprogram---------------
   222            C        $BCDADJ:
   223            C                ADD     A, @51
   224            C                MOV     reg_accd, A
   225            C                JBS     reg_accd, 3
   226            C                ADD     A, @253
   227            C                JBS     reg_accd, 7
   228            C                ADD     A, @208
   229            C                RET
   230            C        $Bin_Bcd3:
   231            C                ENDM
   232            C        ;**********************************************************************;
   233            C        ; Title:      5 Byte Binary Code Transform Bcd Code                    ;
   234            C        ; Description:reg_acccµÄµÍ°ë×Ö½Ú´æ·ÅBCDµÄ×î¸ßÎ»£¬                      ;
   235            C        ;             reg_acc6µÄµÍ°ë×Ö½Ú´æ·ÅBCDµÄ×îµÍÎ»£¬                      ;
   236            C        ;             reg_acc5´æ·Å±»×ª»»×Ö½ÚµÄ×î¸ßÎ»£¬                         ;
   237            C        ;             reg_acc1´æ·Å±»×ª»»×Ö½ÚµÄ×îµÍÎ»¡£                         ;
   238            C        ; Input:      reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5,        ;
   239            C        ; Output:     reg_acc6, reg_acc7, reg_acc8, reg_acc9, reg_acca,        ;
   240            C        ;             reg_accb, reg_accc                                       ;
   241            C        ; Variable Register:reg_acc, reg_accd                                  ;
   242            C        ; Register Changed: R3, 0;ACC                                          ;
   243            C        ; Stack:      1                                                        ;
   244            C        ;**********************************************************************;
   245            C        ;
   246            C        mBinToBcd5 MACRO reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
   247            C        ;
   248            C                MOV     A,  @40         ;Éè¶¨ÒÆÎ»×Ö½Ú³¤¶È(ÆäÖµ=byte*8)
   249            C                MOV     reg_acc, A
   250            C                CLR     reg_acc6        ;ÇåBCDÂë¼Ä´æÆ÷
   251            C                CLR     reg_acc7
   252            C                CLR     reg_acc8
   253            C                CLR     reg_acc9
   254            C                CLR     reg_acca
   255            C                CLR     reg_accb
   256            C                CLR     reg_accc
   257            C                BC      STATUS, C       ;ÇåR3±êÖ¾Î»C
   258            C        $Bin_Bcd1:
   259            C                RLC     reg_acc1
   260            C                RLC     reg_acc2
   261            C                RLC     reg_acc3        ;×óÒÆ±»×ª»»×Ö½ÚµÄ×îµÍÎ»¼Ä´æÆ÷
   262            C                RLC     reg_acc4        ;
   263            C                RLC     reg_acc5        ;×óÒÆ±»×ª»»×Ö½ÚµÄ×î¸ßÎ»¼Ä´æÆ÷
   264            C        ;
   265            C                RLC     reg_acc6        ;×óÒÆBCDÂë¼Ä´æÆ÷µÄ×îµÍÎ»
   266            C                RLC     reg_acc7
   267            C                RLC     reg_acc8
   268            C                RLC     reg_acc9
   269            C                RLC     reg_acca
   270            C                RLC     reg_accb
   271            C                RLC     reg_accc        ;×óÒÆBCDÂë¼Ä´æÆ÷µÄ×î¸ßÎ»
   272            C                DJZ     reg_acc         ;ÒÆÎ»Íê³ÉÁËÂð£¿
   273            C                JMP     $Bin_Bcd2       ;Î´Íê£¬½øÐÐBCDÂëµ÷Õû
   274            C                JMP     $Bin_Bcd3       ;ÒÆÎ»Íê£¬Ìø³ö
   275            C        $Bin_Bcd2:
   276            C                MOV     A, reg_acc6     ;¶Ôreg_acc6½øÐÐBCDÂëµ÷Õû
   277            C                CALL    $BCDADJ         ;µ÷BCDÂëµ÷Õû×Ó³ÌÐò
   278            C                MOV     reg_acc6, A
   279            C                MOV     A, reg_acc7     ;¶Ôreg_acc7½øÐÐBCDÂëµ÷Õû
   280            C                CALL    $BCDADJ
   281            C                MOV     reg_acc7, A
   282            C                MOV     A, reg_acc8     ;¶Ôreg_acc8½øÐÐBCDÂëµ÷Õû
   283            C                CALL    $BCDADJ
   284            C                MOV     reg_acc8, A
   285            C                MOV     A, reg_acc9     ;¶Ôreg_acc9½øÐÐBCDÂëµ÷Õû
   286            C                CALL    $BCDADJ
   287            C                MOV     reg_acc9, A
   288            C                MOV     A, reg_acca     ;¶Ôreg_acca½øÐÐBCDÂëµ÷Õû
   289            C                CALL    $BCDADJ
   290            C                MOV     reg_acca, A
   291            C                MOV     A, reg_accb     ;¶Ôreg_accb½øÐÐBCDÂëµ÷Õû
   292            C                CALL    $BCDADJ
   293            C                MOV     reg_accb, A
   294            C                MOV     A, reg_accc     ;¶Ôreg_accc½øÐÐBCDÂëµ÷Õû
   295            C                CALL    $BCDADJ
   296            C                MOV     reg_accc, A
   297            C                JMP     $Bin_Bcd1       ;Î´ÒÆÍê£¬·µ»Ø£¬¼ÌÐø½øÐÐÒÆÎ»´¦Àí
   298            C        ;
   299            C        ;-------BCD Code Adjust Subprogram---------------
   300            C        $BCDADJ:
   301            C                ADD     A, @51
   302            C                MOV     reg_accd, A
   303            C                JBS     reg_accd, 3
   304            C                ADD     A, @253
   305            C                JBS     reg_accd, 7
   306            C                ADD     A, @208
   307            C                RET
   308            C        $Bin_Bcd3:
   309            C                ENDM
   310            C        ;
   311            C        ;**********************************************************************;
   312            C        ; Title:      1 Byte Bcd Code Transform 1 Byte Binary Code             ;
   313            C        ; Input:      reg_acc1(BCD code)                                       ;
   314            C        ; Output:     reg_acc2(Binary Code)                                    ;
   315            C        ; Register Changed: STATUS, C;ACC                                      ;
   316            C        ;**********************************************************************;
   317            C        ;
   318            C        mBcdToBin1 MACRO reg_acc1, reg_acc2
   319            C        ;
   320            C                CLR     reg_acc2
   321            C                SWAPA   reg_acc1        ;½«reg_acc1µÄ¸ß°ë×Ö½ÚËÍµ½AµÄµÍ°ë×Ö½Ú
   322            C                AND     A, @0X0F        ;ÆÁ±Îreg_acc1, 0-3bit.
   323            C                MOV     reg_acc2, A
   324            C                BC      STATUS, C
   325            C                RLC     reg_acc2        ;reg_acc2*10
   326            C                RLC     reg_acc2
   327            C                ADD     reg_acc2, A
   328            C                RLC     reg_acc2
   329            C                MOV     A, reg_acc1
   330            C                AND     A, @0X0F        ;ÆÁ±Îreg_acc1, 4-7bit
   331            C                ADD     reg_acc2, A     ;bcd codeµÄÊ®Î»Êý³Ë10ºó¼Óbcd codeµÄ¸öÎ»Êý
   332            C                ENDM
   333            C        ;
   334            C        ;**********************************************************************;
   335            C        ; Title:     2 Byte Bcd Code Transform 2 Byte Binary Code              ;
   336            C        ; Input:     reg_acc1, reg_acc2;reg_acc2:High Bigit Of Bcd Code;       ;
   337            C        ;            reg_acc1:Low Bigit Of Bcd Code.                           ;
   338            C        ; Output:    reg_acc3, reg_acc4;reg_acc4:High Byte Binary Code;        ;
   339            C        ;            reg_acc3:Low Byte Of Binary Code.                         ;
   340            C        ; Register Changed: STATUS, C; ACC                                     ;
   341            C        ; Stack:     1                                                         ;
   342            C        ;**********************************************************************;
   343            C        ;
   344            C        mBcdToBin2 MACRO reg_acc2, reg_acc1, reg_acc4, reg_acc3
   345            C        ;
   346            C                CLR     reg_acc3        ;clear binary code register
   347            C                CLR     reg_acc4
   348            C                MOV     A, @16          ;ÒÆÎ»µÄ´ÎÊý£¨reg_acc==byte*8)
   349            C                Mov     reg_acc, A
   350            C        $Bcd_Bin1:
   351            C                BC      STATUS, C
   352            C                RRC     reg_acc2        ;½«BCDÊýºÍBINARYÊýÒ»ÆðÓÒÒÆ£¬´Ó¸ßÒÆµ½µÍ
   353            C                RRC     reg_acc1
   354            C                RRC     reg_acc4
   355            C                RRC     reg_acc3
   356            C                MOV     A, reg_acc1     ;¶ÔBCDÊý½øÐÐBCDµ÷Õû
   357            C                CALL    $Binadj
   358            C                MOV     reg_acc1, A
   359            C                MOV     A, reg_acc2
   360            C                CALL    $Binadj
   361            C                MOV     reg_acc2, A
   362            C                DJZ     reg_acc
   363            C                JMP     $Bcd_Bin1
   364            C                JMP     $Bcd_Bin2
   365            C        $Binadj:
   366            C                MOV     reg_accd, A
   367            C                JBC     reg_accd, 3
   368            C                ADD     A, @253
   369            C                JBC     reg_accd, 7
   370            C                ADD     A, @208
   371            C                RET
   372            C        $Bcd_Bin2:
   373            C                ENDM
   374            C        ;
   375            C        ;**********************************************************************;
   376            C        ; Title:    3 Byte Bcd Code Transform 3 Byte Binary Code               ;
   377            C        ; Input:    reg_acc1,reg_acc2,reg_acc3;reg_acc3:High Bigit Of Bcd Code;;
   378            C        ;           reg_acc1:Low Bigit Of Bcd Code.                            ;
   379            C        ; Output:   reg_acc4,reg_acc5,reg_acc6;reg_acc6:High Byte Binary Code; ;
   380            C        ;           reg_acc4:Low Byte Of Binary Code.                          ;
   381            C        ; Register Changed: STATUS, C; ACC                                     ;
   382            C        ; Stack:     1                                                         ;
   383            C        ;**********************************************************************;
   384            C        ;
   385            C        mBcdToBin3 MACRO reg_acc3, reg_acc2, reg_acc1, reg_acc6, reg_acc5, reg_acc4
   386            C        ;
   387            C                CLR     reg_acc4
   388            C                CLR     reg_acc5
   389            C                CLR     reg_acc6
   390            C                MOV     A, @24          ;ÒÆÎ»µÄ´ÎÊý£¨reg_acc==BYTE*8)
   391            C                MOV     reg_acc, A
   392            C        $Bcd_Bin1:
   393            C                BC      STATUS, C
   394            C                RRC     reg_acc3
   395            C                RRC     reg_acc2
   396            C                RRC     reg_acc1
   397            C                RRC     reg_acc6
   398            C                RRC     reg_acc5
   399            C                RRC     reg_acc4
   400            C                MOV     A, reg_acc1
   401            C                CALL    $Binadj
   402            C                MOV     reg_acc1, A
   403            C                MOV     A, reg_acc2
   404            C                CALL    $Binadj
   405            C                MOV     reg_acc2, A
   406            C                MOV     A, reg_acc3
   407            C                CALL    $Binadj
   408            C                MOV     reg_acc3, A
   409            C                DJZ     reg_acc
   410            C                JMP     $Bcd_Bin1
   411            C                JMP     $Bcd_Bin2
   412            C        $Binadj:
   413            C                MOV     reg_accd, A
   414            C                JBC     reg_accd, 3
   415            C                ADD     A, @253
   416            C                JBC     reg_accd, 7
   417            C                ADD     A, @208
   418            C                RET
   419            C        $Bcd_Bin2:
   420            C                ENDM
   421            C        ;
   422            C        ;**********************************************************************;
   423            C        ; Title:     4 Byte Bcd Code Transform 4 Byte Binary Code              ;
   424            C        ; Input:     reg_acc1, reg_acc2, reg_acc3, reg_acc4;reg_acc4:High Bigit;
   425            C        ;            Of Bcd Code;reg_acc1:Low Bigit Of Bcd Code.               ;
   426            C        ; Output:    reg_acc5, reg_acc6, reg_acc7, reg_acc8;reg_acc8:High Byte ;
   427            C        ;            Binary Code;reg_acc5:Low Byte Of Binary Code.             ;
   428            C        ; Register Changed: STATUS, C;ACC                                      ;
   429            C        ; Stack:     1                                                         ;
   430            C        ;**********************************************************************;
   431            C        ;
   432            C        mBcdToBin4 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc8, reg_acc7, reg_acc6, reg_acc5
   433            C        ;
   434            C                CLR     reg_acc5
   435            C                CLR     reg_acc6
   436            C                CLR     reg_acc7
   437            C                CLR     reg_acc8
   438            C                MOV     A, @32          ;ÒÆÎ»µÄ´ÎÊý£¨reg_acc==BYTE*8)
   439            C                MOV     reg_acc, A
   440            C        $Bcd_Bin1:
   441            C                BC      STATUS, C
   442            C                RRC     reg_acc4
   443            C                RRC     reg_acc3
   444            C                RRC     reg_acc2
   445            C                RRC     reg_acc1
   446            C                RRC     reg_acc8
   447            C                RRC     reg_acc7
   448            C                RRC     reg_acc6
   449            C                RRC     reg_acc5
   450            C                MOV     A, reg_acc1
   451            C                CALL    $Binadj
   452            C                MOV     reg_acc1, A
   453            C                MOV     A, reg_acc2
   454            C                CALL    $Binadj
   455            C                MOV     reg_acc2, A
   456            C                MOV     A, reg_acc3
   457            C                CALL    $Binadj
   458            C                MOV     reg_acc3, A
   459            C                MOV     A, reg_acc4
   460            C                CALL    $Binadj
   461            C                MOV     reg_acc4, A
   462            C                DJZ     reg_acc
   463            C                JMP     $Bcd_Bin1
   464            C                JMP     $Bcd_Bin2
   465            C        $Binadj:
   466            C                MOV     reg_accd, A
   467            C                JBC     reg_accd, 3
   468            C                ADD     A, @253
   469            C                JBC     reg_accd, 7
   470            C                ADD     A, @208
   471            C                RET
   472            C        $Bcd_Bin2:
   473            C                ENDM
   474            C        ;
   475            C        ;**********************************************************************;
   476            C        ; Title:     5 Byte Bcd Code Transform 5 Byte Binary Code              ;
   477            C        ; Input:     reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5;         ;
   478            C        ;            reg_acc5:High Bigit Of Bcd Code;reg_acc1:lOw Bigit Of     ;
   479            C        ;            Bcd Code.                                                 ;
   480            C        ; Output:    reg_acc6, reg_acc7, reg_acc8, reg_acc9, reg_acca;         ;
   481            C        ;            reg_acca:High Byte Of Binary Code;reg_acc6:Low Byte       ;
   482            C        ;            Of Binary Code.                                           ;
   483            C        ; Register Changed: STATUS, C; ACC                                     ;
   484            C        ; Stack:     1                                                         ;
   485            C        ;**********************************************************************;
   486            C        ;
   487            C        mBcdToBin5 MACRO  reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
   488            C        ;
   489            C                CLR     reg_acc6
   490            C                CLR     reg_acc7
   491            C                CLR     reg_acc8
   492            C                CLR     reg_acc9
   493            C                CLR     reg_acca
   494            C                MOV     A, @40          ;ÒÆÎ»µÄ´ÎÊý£¨reg_acc==BYTE*8)
   495            C                MOV     reg_acc, A
   496            C        $Bcd_Bin1:
   497            C                BC      STATUS, C
   498            C                RRC     reg_acc5
   499            C                RRC     reg_acc4
   500            C                RRC     reg_acc3
   501            C                RRC     reg_acc2
   502            C                RRC     reg_acc1
   503            C                RRC     reg_acca
   504            C                RRC     reg_acc9
   505            C                RRC     reg_acc8
   506            C                RRC     reg_acc7
   507            C                RRC     reg_acc6
   508            C                MOV     A, reg_acc1
   509            C                CALL    $Binadj
   510            C                MOV     reg_acc1, A
   511            C                MOV     A, reg_acc2
   512            C                CALL    $Binadj
   513            C                MOV     reg_acc2, A
   514            C                MOV     A, reg_acc3
   515            C                CALL    $Binadj
   516            C                MOV     reg_acc3, A
   517            C                MOV     A, reg_acc4
   518            C                CALL    $Binadj
   519            C                MOV     reg_acc4, A
   520            C                MOV     A, reg_acc5
   521            C                CALL    $Binadj
   522            C                MOV     reg_acc5, A
   523            C                DJZ     reg_acc
   524            C                JMP     $Bcd_Bin1
   525            C                JMP     $Bcd_Bin2
   526            C        $Binadj:
   527            C                MOV     reg_accd, A
   528            C                JBC     reg_accd, 3
   529            C                ADD     A, @253
   530            C                JBC     reg_accd, 7
   531            C                ADD     A, @208
   532            C                RET
   533            C        $Bcd_Bin2:
   534            C                ENDM
   535            C        
   536            C        
   537            C        ;*****************************************************************
   538            C        ;Function:    Subtration
   539            C        ;Input:       reg_acc2, reg_acc1, reg_acc3
   540            C        ;Output:      reg_acc2, reg_acc1
   541            C        ;description: reg_acc2/reg_acc1 is the reslut;
   542            C        ;             reg_acc3 is a symbol:
   543            C        ;             0X00 Mean reslut is plus
   544            C        ;             0X01 Mean reslut is negative
   545            C        ;*****************************************************************
   546            C        mSubtration2_1 MACRO reg_acc2, reg_acc1, reg_acc3
   547            C                BC      STATUS,C
   548            C                MOV     A,reg_acc3
   549            C                SUB     reg_acc1,A
   550            C                JBC     STATUS,C
   551            C                JMP     Subtration_End  
   552            C                CLR     reg_acc3
   553            C                MOV     A,@0X01
   554            C                SUB     A,reg_acc2
   555            C                JBC     STATUS,C
   556            C                DEC     reg_acc2
   557            C                JBC     STATUS,C
   558            C                INC     reg_acc3        
   559            C        Subtration_End:
   560            C                ENDM
   561            C        
   562            C        ;**********************************************************************;
   563            C        ; Title:        Division 8 bits /8 bits -> 8 bit --8 bits              ;
   564            C        ; Description:  reg_acc1/reg_acc2->reg_acc1 --reg_acc2                 ;
   565            C        ; Input:        Dividend reg_acc1        Divisor    reg_acc2           ;
   566            C        ; Output:       Result   reg_acc1        Remainder  reg_acc2           ;
   567            C        ; Variable Register:None                                               ;
   568            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20)                 ;
   569            C        ;**********************************************************************;
   570            C        mDIV1_1 MACRO reg_acc1, reg_acc2
   571            C        ;
   572            C                MOV     A, @8           ;Recurrence Cortrol Data
   573            C                MOV     reg_acc, A
   574            C                CLRA                    ;Check Divisor Is Zero
   575            C                OR      A, reg_acc2     ;Divisor load into A register
   576            C                JBC     STATUS, 2
   577            C                JMP     $_Div_Out       ;Divisor Is Zero, A=0£¬Exit Peration.
   578            C                CLR     reg_acc2        ;Divisor Is Not Zero, Begin Peration£¬Then A=1
   579            C        $_Div_Sub:
   580            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   581            C                RLC     reg_acc2
   582            C                BS      reg_acc1, 0     ;Before Check Dividend > Divisor,  Quotient Low Set 1.
   583            C                SUB     reg_acc2, a
   584            C                JBC     STATUS, C
   585            C                JMP     $_Div_Cnt       ;Dividend > Divisor
   586            C                BC      reg_acc1, 0     ;Dividend < Divisor, Quotient low bit clear 0.
   587            C                ADD     reg_acc2, A     ;Revert Dividend
   588            C        $_Div_Cnt:
   589            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   590            C                JMP     $_Div_Sub
   591            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   592            C        $_Div_Out:
   593            C                ENDM
   594            C        ;
   595            C        ;**********************************************************************;
   596            C        ; Title:        Division 16 bits /8 bits -> 16 bit --8 bits            ;
   597            C        ; Description:  (reg_acc2,reg_acc1)/reg_acc3                           ;
   598            C        ;               ->(reg_acc2,reg_acc1)--reg_acc3                        ;
   599            C        ; Input:        Dividend reg_acc2,reg_acc1       Divisor    reg_acc3   ;
   600            C        ; Output:       Result   reg_acc2,reg_acc1       Remainder  reg_acc3   ;
   601            C        ; Variable Register:None                                               ;
   602            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20)                 ;
   603            C        ;**********************************************************************;
   604            C        ;
   605            C        mDIV2_1 MACRO reg_acc2, reg_acc1, reg_acc3
   606            C        ;
   607            C                MOV     A, @16          ;Recurrence Cortrol Data
   608            C                MOV     reg_acc, A
   609            C                CLRA                    ;Check Divisor Is Zero
   610            C                OR      A, reg_acc3     ;Divisor load into A register
   611            C                JBC     STATUS, Z
   612            C                JMP     $_Div_Out       ;Divisor Is Zero, A=0£¬Exit Peration.
   613            C                CLR     reg_acc3        ;Divisor Is Not Zero, Begin Peration£¬Then A=1
   614            C        $_Div_Sub:
   615            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   616            C                RLC     reg_acc2
   617            C                RLC     reg_acc3
   618            C                BS      reg_acc1, 0     ;Before Check Dividend > Divisor,  Quotient Low Set 1.
   619            C                JBS     STATUS, C
   620            C                JMP     $_Div_S_0
   621            C                SUB     reg_acc3, A
   622            C                JMP     $_Div_Cnt
   623            C        $_Div_S_0:
   624            C                SUB     reg_acc3, A
   625            C                JBC     STATUS, C
   626            C                JMP     $_Div_Cnt
   627            C                BC      reg_acc1, 0
   628            C                ADD     reg_acc3, A
   629            C        $_Div_Cnt:
   630            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   631            C                JMP     $_Div_Sub
   632            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   633            C        $_Div_Out:
   634            C                ENDM
   635            C        ;
   636            C        ;**********************************************************************;
   637            C        ; Title:        Division 16 bits /16 bits -> 16 bit --16 bits          ;
   638            C        ; Description:  (reg_acc2, reg_acc1)/(reg_acc4, reg_acc3)              ;
   639            C        ;               ->(reg_acc2, reg_acc1)--(reg_acc4, reg_acc3)           ;
   640            C        ; Input:        Dividend reg_acc2,reg_acc1 Divisor   reg_acc4,reg_acc3 ;
   641            C        ; Output:       Result   reg_acc2,reg_acc1 Remainder reg_acc4,reg_acc3 ;
   642            C        ; Variable Register:None                                               ;
   643            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20)                 ;
   644            C        ;                   , reg_acc5(0x025), reg_acc6(0x26)                  ;
   645            C        ;**********************************************************************;
   646            C        ;
   647            C        mDIV2_2 MACRO reg_acc2, reg_acc1, reg_acc4, reg_acc3
   648            C        ;
   649            C                CLRA
   650            C                OR      A, reg_acc3     ;Check Divisor Is Zero
   651            C                OR      A, reg_acc4
   652            C                JBC     STATUS, Z
   653            C                JMP     $_Div_Out       ;Divisor Is Zero, A=0£¬Exit Peration.
   654            C                MOV     A, @16          ;Recurrence Cortrol Data
   655            C                MOV     reg_acc, A
   656            C                CLR     reg_acc5        ;Divisor Is Not Zero, Begin Peration£¬Then A=1
   657            C                CLR     reg_acc6
   658            C        $_Div_Sub:
   659            C                BC      STATUS, C       ;Clear c Flag
   660            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   661            C                RLC     reg_acc2
   662            C                RLC     reg_acc5
   663            C                RLC     reg_acc6
   664            C                MOV     A, reg_acc4     ;Check If Dividend > Divisor
   665            C                SUB     A, reg_acc6     ;Check High Word  Equal
   666            C                JBS     STATUS, Z
   667            C                JMP     $_Div_Set
   668            C                MOV     A, reg_acc3     ;High Word Equal Then Check  Low Word
   669            C                SUB     A, reg_acc5
   670            C        $_Div_Set:
   671            C                JBS     STATUS, C
   672            C                JMP     $_Div_S_0       ;Dividend < Divisor, Quotient Add 0.
   673            C                BS      reg_acc1, 0     ;Dividend > Divisor, Quotient Add 1.
   674            C                MOV     A, reg_acc3     ;Dividend-Divisor, From Low Word To High Word.
   675            C                SUB     reg_acc5, A     ;Save Diviso
   676            C                JBS     STATUS, C
   677            C                DEC     reg_acc6        ;If Low Word < High Word, Next High Word Sub 1.
   678            C                MOV     A, reg_acc4
   679            C                SUB     reg_acc6, A
   680            C        $_Div_S_0:
   681            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   682            C                JMP     $_Div_Sub
   683            C                MOV     A, reg_acc6     ;Save Result Into User's Register.
   684            C                MOV     reg_acc4, A
   685            C                MOV     A, reg_acc5
   686            C                MOV     reg_acc3, A
   687            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   688            C        $_Div_Out:
   689            C                ENDM
   690            C        ;
   691            C        ;**********************************************************************;
   692            C        ; Title:        Division 24 bits /8 bits -> 24 bit --8 bits            ;
   693            C        ; Description:  (reg_acc3, reg_acc2, reg_acc1)/reg_acc4                ;
   694            C        ;               ->(reg_acc3, reg_acc2, reg_acc1) --reg_acc4            ;
   695            C        ; Input:        Dividend reg_acc3,reg_acc2,reg_acc1 Divisor   reg_acc4 ;
   696            C        ; Output:       Result   reg_acc3,reg_acc2,reg_acc1 Remainder reg_acc4 ;
   697            C        ; Variable Register:None                                               ;
   698            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20)                 ;
   699            C        ;**********************************************************************;
   700            C        ;
   701            C        mDIV3_1 MACRO reg_acc3, reg_acc2, reg_acc1, reg_acc4
   702            C        ;
   703            C                MOV     A, @24          ;Recurrence Cortrol Data
   704            C                MOV     reg_acc, A
   705            C                CLRA                    ;Check Divisor Is Zero
   706            C                OR      A, reg_acc4     ;Divisor load into A register
   707            C                JBC     STATUS, Z
   708            C                JMP     $_Div_Out       ;Divisor Is Zero, A=0£¬Exit Peration.
   709            C                CLR     reg_acc4        ;Divisor Is Not Zero, Begin Peration£¬Then A=1
   710            C        $_Div_Sub:
   711            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   712            C                RLC     reg_acc2
   713            C                RLC     reg_acc3
   714            C                RLC     reg_acc4
   715            C                BS      reg_acc1, 0     ;Before Check Dividend > Divisor,  Quotient Low Set 1.
   716            C                JBS     STATUS, C
   717            C                JMP     $_Div_S_0       ;C Flag Is 0, Check Dividend > Divisor
   718            C                SUB     reg_acc4, A     ;C Flag Is 1, Quotient Low Bit Set 1
   719            C                JMP     $_Div_Cnt
   720            C        $_Div_S_0:
   721            C                SUB     reg_acc4, A
   722            C                JBC     STATUS, C
   723            C                JMP     $_Div_Cnt       ;Dividend > Divisor
   724            C                BC      reg_acc1, 0     ;Dividend < Divisor, Quotient low bit clear 0.
   725            C                ADD     reg_acc4, A     ;Revert Dividend
   726            C        $_Div_Cnt:
   727            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   728            C                JMP     $_Div_Sub
   729            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   730            C        $_Div_Out:
   731            C                ENDM
   732            C        ;
   733            C        ;**********************************************************************;
   734            C        ; Title:        Division 24 bits /16 bits -> 24 bit --16 bits          ;
   735            C        ; Description:  (reg_acc3, reg_acc2, reg_acc1)/(reg_acc5, reg_acc4)    ;
   736            C        ;               ->(reg_acc3, reg_acc2, reg_acc1) --(reg_acc5, reg_acc4);
   737            C        ; Input:        Dividend  reg_acc3 reg_acc2 reg_acc1                   ;
   738            C        ;               Divisor   reg_acc5, reg_acc4                           ;
   739            C        ; Output:       Result    reg_acc3 reg_acc2 reg_acc1                   ;
   740            C        ;               Remainder reg_acc5, reg_acc4                           ;
   741            C        ; Variable Register: None                                              ;
   742            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20), reg_acc6(0x26) ;
   743            C        ;                   , reg_acc7(0x27)                                   ;
   744            C        ;**********************************************************************;
   745            C        ;
   746            C        mDIV3_2 MACRO reg_acc3, reg_acc2, reg_acc1, reg_acc5, reg_acc4
   747            C        ;
   748            C                CLRA
   749            C                OR      A, reg_acc4     ;Check Divisor Is Zero
   750            C                OR      A, reg_acc5
   751            C                JBC     STATUS, Z
   752            C                JMP     $_Div_Out       ;If Divisor Is Zero, A=0£¬Exit Peration.
   753            C                MOV     A, @24          ;Recurrence Cortrol Data
   754            C                MOV     reg_acc, A      ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
   755            C                CLR     reg_acc6        ;clear Remainder register
   756            C                CLR     reg_acc7
   757            C        $_Div_Sub:
   758            C                BC      STATUS, C       ;Clear c Flag
   759            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   760            C                RLC     reg_acc2
   761            C                RLC     reg_acc3
   762            C                RLC     reg_acc6
   763            C                RLC     reg_acc7
   764            C                JBC     STATUS, C
   765            C                JMP     $_Div_Set_1     ;C Flag Is 1, Quotient Low Bit Set 1
   766            C                MOV     A, reg_acc5     ;Check If Dividend > Divisor
   767            C                SUB     A, reg_acc7     ;Check High Word  Equal
   768            C                JBS     STATUS, Z
   769            C                JMP     $_Div_Set
   770            C                MOV     A, reg_acc4     ;High Word Equal Then Check  Low Word
   771            C                SUB     A, reg_acc6
   772            C        $_Div_Set:
   773            C                JBS     STATUS, C
   774            C                JMP     $_Div_S_0       ;Dividend < Divisor, Quotient Add 0.
   775            C        $_Div_Set_1:
   776            C                BS      reg_acc1, 0     ;Dividend > Divisor, Quotient Add 1.
   777            C                MOV     A, reg_acc4     ;Dividend-Divisor, From Low Word To High Word.
   778            C                SUB     reg_acc6, A     ;Save Diviso
   779            C                JBS     STATUS, C
   780            C                DEC     reg_acc7        ;If Low Word < High Word, Next High Word Sub 1.
   781            C                MOV     A, reg_acc5
   782            C                SUB     reg_acc7, A
   783            C        $_Div_S_0:
   784            C                DJZ     reg_acc         ;If Finish Shift, SetA=1 Exit
   785            C                JMP     $_Div_Sub
   786            C                MOV     A, reg_acc7     ;Save Result Into User's Register.
   787            C                MOV     reg_acc5, A
   788            C                MOV     A, reg_acc6
   789            C                MOV     reg_acc4, A
   790            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   791            C        $_Div_Out:
   792            C                ENDM
   793            C        ;
   794            C        ;**********************************************************************;
   795            C        ; Title:        Division 24 bits /24 bits -> 24 bit --24 bits          ;
   796            C        ; Description:  (reg_acc3,reg_acc2,reg_acc1)/                          ;
   797            C        ;               (reg_acc6,reg_acc5,reg_acc4)                           ;
   798            C        ;               ->(reg_acc3,reg_acc2,reg_acc1)                         ;
   799            C        ;               --(reg_acc6,reg_acc5,reg_acc4)                         ;
   800            C        ; Input:        Dividend  reg_acc3 reg_acc2 reg_acc1                   ;
   801            C        ;               Divisor   reg_acc6 reg_acc5, reg_acc4                  ;
   802            C        ; Output:       Result    reg_acc3 reg_acc2 reg_acc1                   ;
   803            C        ;               Remainder reg_acc6, reg_acc5, reg_acc4                 ;
   804            C        ; Variable Register:None                                               ;
   805            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20), reg_acc7(x027) ;
   806            C        ;                   , reg_acc8(0x28),  reg_acc9(0x29)                  ;
   807            C        ;**********************************************************************;
   808            C        ;
   809            C        mDIV3_3 MACRO reg_acc3, reg_acc2, reg_acc1, reg_acc6, reg_acc5, reg_acc4
   810            C        ;
   811            C                CLRA
   812            C                OR      A, reg_acc4     ;Check Divisor Is Zero
   813            C                OR      A, reg_acc5
   814            C                OR      A, reg_acc6
   815            C                JBC     STATUS, Z
   816            C                JMP     $_Div_Out       ;If Divisor Is Zero, A=0£¬Exit Peration.
   817            C                MOV     A, @24          ;Recurrence Cortrol Data
   818            C                MOV     reg_acc, A      ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
   819            C                CLR     reg_acc7        ;clear Remainder register
   820            C                CLR     reg_acc8
   821            C                CLR     reg_acc9
   822            C        $_Div_Sub:
   823            C                BC      STATUS, C       ;Clear c Flag
   824            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   825            C                RLC     reg_acc2
   826            C                RLC     reg_acc3
   827            C                RLC     reg_acc7
   828            C                RLC     reg_acc8
   829            C                RLC     reg_acc9
   830            C                MOV     A, reg_acc6     ;Check If Dividend > Divisor
   831            C                SUB     A, reg_acc9     ;Check High Word  Equal
   832            C                JBS     STATUS, Z
   833            C                JMP     $_Div_Set
   834            C                MOV     A, reg_acc5     ;High Word Equal Then Check  Low Word
   835            C                SUB     A, reg_acc8
   836            C                JBS     STATUS, Z
   837            C                JMP     $_Div_Set
   838            C                MOV     A, reg_acc4
   839            C                SUB     A, reg_acc7
   840            C        $_Div_Set:
   841            C                JBS     STATUS, C
   842            C                JMP     $_Div_S_0       ;If Dividend < Divisor, Quotient Add 0.
   843            C                BS      reg_acc1, 0     ;If Dividend > Divisor, Quotient Add 1.
   844            C                MOV     A, reg_acc4     ;Dividend-Divisor, From Low Word To High Word.
   845            C                SUB     reg_acc7, A     ;Save Diviso
   846            C                JBS     STATUS, C
   847            C                DEC     reg_acc8        ;If Low Word < High Word, Next High Word Sub 1.
   848            C                MOV     A, reg_acc5
   849            C                SUB     reg_acc8, A
   850            C                JBS     STATUS, C
   851            C                DEC     reg_acc9
   852            C                MOV     A, reg_acc6
   853            C                SUB     reg_acc9, A
   854            C        $_Div_S_0:
   855            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   856            C                JMP     $_Div_Sub
   857            C                MOV     A, reg_acc9     ;Save Result Into User's Register.
   858            C                MOV     reg_acc6, A
   859            C                MOV     A, reg_acc8
   860            C                MOV     reg_acc5, A
   861            C                MOV     A, reg_acc7
   862            C                MOV     reg_acc4, A
   863            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   864            C        $_Div_Out:
   865            C                ENDM
   866            C        ;
   867            C        ;**********************************************************************;
   868            C        ; Title:        Division 32 bits /8 bits -> 32 bit --8 bits            ;
   869            C        ; Description:  (reg_acc4, reg_acc3, reg_acc2, reg_acc1)/reg_acc5      ;
   870            C        ;               ->(reg_acc4, reg_acc3, reg_acc2, reg_acc1) --reg_acc5  ;
   871            C        ; Input:        Dividend  reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
   872            C        ;               Divisor   reg_acc5                                     ;
   873            C        ; Output:       Result    reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
   874            C        ;               Remainder reg_acc5                                     ;
   875            C        ; Variable Register:None                                               ;
   876            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20)                 ;
   877            C        ;**********************************************************************;
   878            C        ;
   879            C        mDIV4_1 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc5
   880            C        ;
   881            C                MOV     A, @32          ;Recurrence Cortrol Data
   882            C                MOV     reg_acc, A
   883            C                CLRA                    ;Check Divisor Is Zero
   884            C                OR      A, reg_acc5     ;Divisor load into A register
   885            C                JBC     STATUS, Z
   886            C                JMP     $_Div_Out       ;Divisor Is Zero, A=0£¬Exit Peration.
   887            C                CLR     reg_acc5        ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
   888            C        $_Div_Sub:
   889            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   890            C                RLC     reg_acc2
   891            C                RLC     reg_acc3
   892            C                RLC     reg_acc4
   893            C                RLC     reg_acc5
   894            C                BS      reg_acc1, 0     ;Before Check Dividend > Divisor,  Quotient Low Bit _Div_Set 1.
   895            C                JBS     STATUS, C
   896            C                JMP     $_Div_S_0       ;C Flag Is 0, Check Dividend > Divisor
   897            C                SUB     reg_acc5, A     ;C Flag Is 1, Quotient Low Bit Set 1
   898            C                JMP     $_Div_Cnt
   899            C        $_Div_S_0:
   900            C                SUB     reg_acc5, A
   901            C                JBC     STATUS, C
   902            C                JMP     $_Div_Cnt       ;Dividend > Divisor
   903            C                BC      reg_acc1, 0     ;Dividend < Divisor, Quotient low bit clear 0.
   904            C                ADD     reg_acc5, A     ;Revert Dividend
   905            C        $_Div_Cnt:
   906            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   907            C                JMP     $_Div_Sub
   908            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   909            C        $_Div_Out:
   910            C                ENDM
   911            C        ;
   912            C        ;**********************************************************************;
   913            C        ; Title:        Division 32 bits /16 bits -> 32 bit --16 bits          ;
   914            C        ; Description:  (reg_acc4, reg_acc3, reg_acc2, reg_acc1)/              ;
   915            C        ;               (reg_acc6, reg_acc5)                                   ;
   916            C        ;               ->(reg_acc4, reg_acc3, reg_acc2, reg_acc1)             ;
   917            C        ;               --(reg_acc6, reg_acc5)                                 ;
   918            C        ; Input:        Dividend  reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
   919            C        ;               Divisor   reg_acc6 reg_acc5                            ;
   920            C        ; Output:       Result    reg_acc4, reg_acc3 reg_acc2 reg_acc1         ;
   921            C        ;               Remainder reg_acc6, reg_acc5                           ;
   922            C        ; Variable Register:None                                               ;
   923            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20), reg_acc7(x027) ;
   924            C        ;                   , reg_acc8(0x28)                                   ;
   925            C        ;**********************************************************************;
   926            C        ;
   927            C        mDIV4_2 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc6, reg_acc5
   928            C        ;
   929            C                CLRA
   930            C                OR      A, reg_acc6     ;Check Divisor Is Zero
   931            C                OR      A, reg_acc5
   932            C                JBC     STATUS, Z
   933            C                JMP     $_Div_Out       ;If Divisor Is Zero, A=0£¬Exit Peration.
   934            C                MOV     A, @32          ;Recurrence Cortrol Data
   935            C                MOV     reg_acc, A      ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
   936            C                CLR     reg_acc7        ;clear Remainder register
   937            C                CLR     reg_acc8
   938            C        $_Div_Sub:
   939            C                BC      STATUS, C       ;Clear c Flag
   940            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
   941            C                RLC     reg_acc2
   942            C                RLC     reg_acc3
   943            C                RLC     reg_acc4
   944            C                RLC     reg_acc7
   945            C                RLC     reg_acc8
   946            C                JBC     STATUS, C
   947            C                JMP     $_Div_Set_1     ;C Flag Is 1, Quotient Low Bit Set 1
   948            C                MOV     A, reg_acc6     ;Check If Dividend > Divisor
   949            C                SUB     A, reg_acc8     ;Check High Word  Equal
   950            C                JBS     STATUS, Z
   951            C                JMP     $_Div_Set
   952            C                MOV     A, reg_acc5     ;if High Word Equal Then Check  Low Word
   953            C                SUB     A, reg_acc7
   954            C        $_Div_Set:
   955            C                JBS     STATUS, C
   956            C                JMP     $_Div_S_0       ;If Dividend < Divisor, Quotient Add 0.
   957            C        $_Div_Set_1:
   958            C                BS      reg_acc1, 0     ;If Dividend > Divisor, Quotient Add 1.
   959            C                MOV     A, reg_acc5     ;Dividend-Divisor, From Low Word To High Word.
   960            C                SUB     reg_acc7, A     ;Save Divisor
   961            C                JBS     STATUS, C
   962            C                DEC     reg_acc8        ;If Low Word < High Word, Next High Word Sub 1.
   963            C                MOV     A, reg_acc6
   964            C                SUB     reg_acc8, A
   965            C        $_Div_S_0:
   966            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
   967            C                JMP     $_Div_Sub
   968            C                MOV     A, reg_acc8     ;Save Result Into User's Register.
   969            C                MOV     reg_acc6, A
   970            C                MOV     A, reg_acc7
   971            C                MOV     reg_acc5, A
   972            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
   973            C        $_Div_Out:
   974            C                ENDM
   975            C        ;
   976            C        ;**********************************************************************;
   977            C        ; Title:        Division 32 bits /24 bits -> 32 bit --24 bits          ;
   978            C        ; Description:  (reg_acc4, reg_acc3, reg_acc2, reg_acc1)/              ;
   979            C        ;               (reg_acc7, reg_acc6, reg_acc5)                         ;
   980            C        ;               ->(reg_acc4, reg_acc3, reg_acc2, reg_acc1)             ;
   981            C        ;               --(reg_acc7, reg_acc6, reg_acc5)                       ;
   982            C        ; Input:        Dividend  reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
   983            C        ;               Divisor   reg_acc7 reg_acc6 reg_acc5                   ;
   984            C        ; Output:       Result    reg_acc4, reg_acc3 reg_acc2 reg_acc1         ;
   985            C        ;               Remainder reg_acc7 reg_acc6, reg_acc5                  ;
   986            C        ; Variable Register:None                                               ;
   987            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20), reg_acc8(x028) ;
   988            C        ;                   , reg_acc9(0x29) , reg_acca(0x2a)                  ;
   989            C        ;**********************************************************************;
   990            C        ;
   991            C        mDIV4_3 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc7, reg_acc6, reg_acc5
   992            C        ;
   993            C                CLRA
   994            C                OR      A, reg_acc7     ;Check Divisor Is Zero
   995            C                OR      A, reg_acc6
   996            C                OR      A, reg_acc5
   997            C                JBC     STATUS, Z
   998            C                JMP     $_Div_Out       ;If Divisor Is Zero, A=0£¬Exit Peration.
   999            C                MOV     A, @32          ;Recurrence Cortrol Data
  1000            C                MOV     reg_acc, A      ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
  1001            C                CLR     reg_acc8        ;clear Remainder register
  1002            C                CLR     reg_acc9
  1003            C                CLR     reg_acca
  1004            C        $_Div_Sub:
  1005            C                BC      STATUS, 0       ;Clear c Flag
  1006            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
  1007            C                RLC     reg_acc2
  1008            C                RLC     reg_acc3
  1009            C                RLC     reg_acc4
  1010            C                RLC     reg_acc8
  1011            C                RLC     reg_acc9
  1012            C                RLC     reg_acca
  1013            C                JBC     STATUS, C       ;C Flag Is 1, Quotient Low Bit Set 1
  1014            C                JMP     $_Div_Set_1
  1015            C                MOV     A, reg_acc7     ;Check If Dividend > Divisor
  1016            C                SUB     A, reg_acca     ;Check High Word  Equal
  1017            C                JBS     STATUS, Z
  1018            C                JMP     $_Div_Set
  1019            C                MOV     A, reg_acc6     ;if High Word Equal Then Check  Low Word
  1020            C                SUB     A, reg_acc9
  1021            C                JBS     STATUS, Z
  1022            C                JMP     $_Div_Set
  1023            C                MOV     A, reg_acc5
  1024            C                SUB     A, reg_acc8
  1025            C        $_Div_Set:
  1026            C                JBS     STATUS, C
  1027            C                JMP     $_Div_S_0       ;If Dividend < Divisor, Quotient Add 0.
  1028            C        $_Div_Set_1:
  1029            C                BS      reg_acc1, 0     ;If Dividend > Divisor, Quotient Add 1.
  1030            C                MOV     A, reg_acc5     ;Dividend-Divisor, From Low Word To High Word.
  1031            C                SUB     reg_acc8, A     ;Save Divisor
  1032            C                JBS     STATUS, C
  1033            C                DEC     reg_acc9        ;If Low Word < High Word, Next High Word Sub 1.
  1034            C                MOV     A, reg_acc6
  1035            C                SUB     reg_acc9, A
  1036            C                JBS     STATUS, C
  1037            C                DEC     reg_acca
  1038            C                MOV     A, reg_acc7
  1039            C                SUB     reg_acca, A
  1040            C        $_Div_S_0:
  1041            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
  1042            C                JMP     $_Div_Sub
  1043            C                MOV     A, reg_acca     ;Save Result Into User's Register.
  1044            C                MOV     reg_acc7, A
  1045            C                MOV     A, reg_acc9
  1046            C                MOV     reg_acc6, A
  1047            C                MOV     A, reg_acc8
  1048            C                MOV     reg_acc5, A
  1049            C                MOV     A, @1           ;Finish Peration, A Register Return 1
  1050            C        $_Div_Out:
  1051            C                ENDM
  1052            C        ;
  1053            C        ;**********************************************************************;
  1054            C        ; Title:        Division 32 bits /32 bits -> 32 bit --32 bits          ;
  1055            C        ; Description:  (reg_acc4, reg_acc3, reg_acc2, reg_acc1)/              ;
  1056            C        ;               (reg_acc8, reg_acc7, reg_acc6, reg_acc5)               ;
  1057            C        ;               ->(reg_acc4, reg_acc3, reg_acc2, reg_acc1)             ;
  1058            C        ;               --(reg_acc8, reg_acc7, reg_acc6, reg_acc5)             ;
  1059            C        ; Input:        Dividend  reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
  1060            C        ;               Divisor   reg_acc8 reg_acc7 reg_acc6 reg_acc5          ;
  1061            C        ; Output:       Result    reg_acc4 reg_acc3 reg_acc2 reg_acc1          ;
  1062            C        ;               Remainder reg_acc8 reg_acc7 reg_acc6, reg_acc5         ;
  1063            C        ; Variable Register:None                                               ;
  1064            C        ; Register Changed: STATUS, ACC, reg_acc(address 0x20), reg_acc9(x029) ;
  1065            C        ;                   , reg_acca(0x2a) , reg_accb(0x2b) , reg_accc(0x2c) ;
  1066            C        ;**********************************************************************;
  1067            C        ;
  1068            C        mDIV4_4 MACRO reg_acc4, reg_acc3, reg_acc2, reg_acc1, reg_acc8, reg_acc7, reg_acc6, reg_acc5
  1069            C        ;
  1070            C                CLRA
  1071            C                OR      A, reg_acc8     ;Check Divisor Is Zero
  1072            C                OR      A, reg_acc7
  1073            C                OR      A, reg_acc6
  1074            C                OR      A, reg_acc5
  1075            C                JBC     STATUS, Z
  1076            C                JMP     $_Div_Out       ;If Divisor Is Zero, A=0£¬Exit Peration.
  1077            C                MOV     A, @32          ;Recurrence Cortrol Data
  1078            C                MOV     reg_acc, A      ;Divisor Is Not Zero, Begin Peration£¬Then A=1.
  1079            C                CLR     reg_acc9        ;clear Remainder register
  1080            C                CLR     reg_acca
  1081            C                CLR     reg_accb
  1082            C                CLR     reg_accc
  1083            C        $_Div_Sub:
  1084            C                BC      STATUS, C       ;Clear c Flag
  1085            C                RLC     reg_acc1        ;Dividend Left Shift 1Bit
  1086            C                RLC     reg_acc2
  1087            C                RLC     reg_acc3
  1088            C                RLC     reg_acc4
  1089            C                RLC     reg_acc9
  1090            C                RLC     reg_acca
  1091            C                RLC     reg_accb
  1092            C                RLC     reg_accc
  1093            C                MOV     A, reg_acc8     ;Check If Dividend > Divisor
  1094            C                SUB     A, reg_accc     ;Check High Word  Equal
  1095            C                JBS     STATUS, Z
  1096            C                JMP     $_Div_Set
  1097            C                MOV     A, reg_acc7     ;if High Word Equal Then Check  Low Word
  1098            C                SUB     A, reg_accb
  1099            C                JBS     STATUS, Z
  1100            C                JMP     $_Div_Set
  1101            C                MOV     A, reg_acc6
  1102            C                SUB     A, reg_acca
  1103            C                JBS     STATUS, Z
  1104            C                JMP     $_Div_Set
  1105            C                MOV     A, reg_acc5
  1106            C                SUB     A, reg_acc9
  1107            C        $_Div_Set:
  1108            C                JBS     STATUS, C
  1109            C                JMP     $_Div_S_0       ;If Dividend < Divisor, Quotient Add 0.
  1110            C                BS      reg_acc1, 0     ;If Dividend > Divisor, Quotient Add 1.
  1111            C                MOV     A, reg_acc5     ;Dividend-Divisor, From Low Word To High Word.
  1112            C                SUB     reg_acc9, A     ;Save Divisor
  1113            C                JBS     STATUS, C
  1114            C                DEC     reg_acca        ;If Low Word < High Word, Next High Word Sub 1.
  1115            C                MOV     A, reg_acc6
  1116            C                SUB     reg_acca, A
  1117            C                JBS     STATUS, C
  1118            C                DEC     reg_accb
  1119            C                MOV     A, reg_acc7
  1120            C                SUB     reg_accb, A
  1121            C                JBS     STATUS, C
  1122            C                DEC     reg_accc
  1123            C                MOV     A, reg_acc8
  1124            C                SUB     reg_accc, A
  1125            C        $_Div_S_0:
  1126            C                DJZ     reg_acc         ;If Finish Shift, Set A=1 Exit
  1127            C                JMP     $_Div_Sub
  1128            C                MOV     A, reg_accc     ;Save Result Into User's Register.
  1129            C                MOV     reg_acc8, A
  1130            C                MOV     A, reg_accb
  1131            C                MOV     reg_acc7, A
  1132            C                MOV     A, reg_acca
  1133            C                MOV     reg_acc6, A
  1134            C                MOV     A, reg_acc9
  1135            C                MOV     reg_acc5, A
  1136            C                MOV     A, @1           ;Finish Peration ,  A Register Return 1
  1137            C        $_Div_Out:
  1138            C                ENDM
  1139            C        ;
  1140            C        ;**********************************************************************;
  1141            C        ; Title:          (1 byte) * (1 byte) operation                        ;
  1142            C        ; Description:    reg_acc2 * reg_acc1 = (reg_acc2, reg_acc1)           ;
  1143            C        ; Input:          reg_acc1, reg_acc2                                   ;
  1144            C        ; Output:         reg_acc1, reg_acc2                                   ;
  1145            C        ; Register change:reg_acc                                              ;
  1146            C        ;**********************************************************************;
  1147            C        ;
  1148            C        mMUL1_1 MACRO   reg_acc2, reg_acc1
  1149            C        ;
  1150            C                MOV     A, @8
  1151            C                MOV     reg_acc, A
  1152            C                MOV     A, reg_acc2
  1153            C                CLR     reg_acc2
  1154            C        $Mul11_Loop:
  1155            C                BC      STATUS, C
  1156            C                JBC     reg_acc1, 0
  1157            C                ADD     reg_acc2, A
  1158            C                RRC     reg_acc2
  1159            C                RRC     reg_acc1
  1160            C        ;
  1161            C                DJZ     reg_acc
  1162            C                JMP     $Mul11_Loop
  1163            C                ENDM
  1164            C        ;
  1165            C        ;**********************************************************************;
  1166            C        ; Title:          (1 byte) * (2 bytes) operation                       ;
  1167            C        ; Description:    reg_acc3 * (reg_acc2, reg_acc1)                      ;
  1168            C        ;                 = (reg_acc3, reg_acc2, reg_acc1)                     ;
  1169            C        ; Input:          reg_acc1, reg_acc2, reg_acc3                         ;
  1170            C        ; Output:         reg_acc1, reg_acc2, reg_acc3                         ;
  1171            C        ; Register change:reg_acc                                              ;
  1172            C        ;**********************************************************************;
  1173            C        ;
  1174            C        mMUL1_2 MACRO   reg_acc3, reg_acc2, reg_acc1
  1175            C        ;
  1176            C                MOV     A, @16
  1177            C                MOV     reg_acc, A
  1178            C                MOV     A, reg_acc3
  1179            C                CLR     reg_acc3
  1180            C        $Mul12_Loop:
  1181            C                BC      STATUS, C
  1182            C                JBC     reg_acc1, 0
  1183            C                ADD     reg_acc3, A
  1184            C                RRC     reg_acc3
  1185            C                RRC     reg_acc2
  1186            C                RRC     reg_acc1
  1187            C        ;
  1188            C                DJZ     reg_acc
  1189            C                JMP     $Mul12_Loop
  1190            C                ENDM
  1191            C        ;
  1192            C        ;**********************************************************************;
  1193            C        ; Title:          (1 byte) * (3 bytes) operation                       ;
  1194            C        ; Description:    reg_acc4 * (reg_acc3, reg_acc2, reg_acc1)            ;
  1195            C        ;                 = (reg_acc4, reg_acc3, reg_acc2, reg_acc1)           ;
  1196            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4               ;
  1197            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4               ;
  1198            C        ; Register change:reg_acc                                              ;
  1199            C        ;**********************************************************************;
  1200            C        ;
  1201            C        mMUL1_3 MACRO   reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1202            C        ;
  1203            C                MOV     A, @24
  1204            C                MOV     reg_acc, A
  1205            C                MOV     A, reg_acc4
  1206            C                CLR     reg_acc4
  1207            C        $Mul13_Loop:
  1208            C                BC      STATUS, C
  1209            C                JBC     reg_acc1, 0
  1210            C                ADD     reg_acc4, A
  1211            C                RRC     reg_acc4
  1212            C                RRC     reg_acc3
  1213            C                RRC     reg_acc2
  1214            C                RRC     reg_acc1
  1215            C        ;
  1216            C                DJZ     reg_acc
  1217            C                JMP     $Mul13_Loop
  1218            C                ENDM
  1219            C        ;
  1220            C        ;**********************************************************************;
  1221            C        ; Title:          (1 byte) * (4 bytes) operation                       ;
  1222            C        ; Description:    reg_acc5 * (reg_acc4, reg_acc3, reg_acc2, reg_acc1)  ;
  1223            C        ;                 = (reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1) ;
  1224            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1225            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1226            C        ; Register change:reg_acc                                              ;
  1227            C        ;**********************************************************************;
  1228            C        ;
  1229            C        mMUL1_4  MACRO   reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1230            C        ;
  1231            C                MOV     A, @32
  1232            C                MOV     reg_acc, A
  1233            C                MOV     A, reg_acc5
  1234            C                CLR     reg_acc5
  1235            C        $Mul14_Loop:
  1236            C                BC      STATUS, C
  1237            C                JBC     reg_acc1, 0
  1238            C                ADD     reg_acc5, A
  1239            C                RRC     reg_acc5
  1240            C                RRC     reg_acc4
  1241            C                RRC     reg_acc3
  1242            C                RRC     reg_acc2
  1243            C                RRC     reg_acc1
  1244            C        ;
  1245            C                DJZ     reg_acc
  1246            C                JMP     $Mul14_Loop
  1247            C                ENDM
  1248            C        ;
  1249            C        ;**********************************************************************;
  1250            C        ; Title:          (2 bytes) * (2 bytes) operation                      ;
  1251            C        ; Description:    (reg_acc4, reg_acc3) * (reg_acc2, reg_acc1)          ;
  1252            C        ;                 = (reg_acc4, reg_acc3, reg_acc2, reg_acc1)           ;
  1253            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4               ;
  1254            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4               ;
  1255            C        ; Register change:reg_acc, reg_acc5, reg_acc6                          ;
  1256            C        ;**********************************************************************;
  1257            C        ;
  1258            C        mMUL2_2 MACRO   reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1259            C        ;
  1260            C                MOV     A, @16
  1261            C                MOV     reg_acc, A
  1262            C                MOV     A, reg_acc4
  1263            C                MOV     reg_acc6, A
  1264            C                MOV     A, reg_acc3
  1265            C                MOV     reg_acc5, A
  1266            C                CLR     reg_acc3
  1267            C                CLR     reg_acc4
  1268            C        $Mul22_Loop:
  1269            C                BC      STATUS, C
  1270            C                JBS     reg_acc1, 0
  1271            C                JMP     $Mul22_Rs
  1272            C                MOV     A, reg_acc5
  1273            C                ADD     reg_acc3, A
  1274            C        ;--------------------------------------
  1275            C                MOV     A, reg_acc4
  1276            C                JBC     STATUS, C
  1277            C                ADD     A, @1
  1278            C                RLC     reg_acc
  1279            C                ADD     A, reg_acc6
  1280            C                MOV     reg_acc4, A
  1281            C                JBC     STATUS, C
  1282            C                BS      reg_acc, 0
  1283            C                RRC     reg_acc
  1284            C        $Mul22_Rs:
  1285            C                RRC     reg_acc4
  1286            C                RRC     reg_acc3
  1287            C                RRC     reg_acc2
  1288            C                RRC     reg_acc1
  1289            C        ;
  1290            C                BC      reg_acc, 7
  1291            C                DJZ     reg_acc
  1292            C                JMP     $Mul22_Loop
  1293            C                ENDM
  1294            C        ;
  1295            C        ;**********************************************************************;
  1296            C        ; Title:          (2 bytes) * (3 bytes) operation                      ;
  1297            C        ; Description:    (reg_acc5, reg_acc4) * (reg_acc3, reg_acc2, reg_acc1);
  1298            C        ;                 = (reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1) ;
  1299            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1300            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1301            C        ; Register change:reg_acc, reg_acc6, reg_acc7                          ;
  1302            C        ;**********************************************************************;
  1303            C        ;
  1304            C        mMUL2_3 MACRO   reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1305            C        ;
  1306            C                MOV     A, @24
  1307            C                MOV     reg_acc, A
  1308            C                MOV     A, reg_acc5
  1309            C                MOV     reg_acc7, A
  1310            C                MOV     A, reg_acc4
  1311            C                MOV     reg_acc6, A
  1312            C                CLR     reg_acc4
  1313            C                CLR     reg_acc5
  1314            C        $Mul23_Loop:
  1315            C                BC      STATUS, C
  1316            C                JBS     reg_acc1, 0
  1317            C                JMP     $Mul23_Rs
  1318            C                MOV     A, reg_acc6
  1319            C                ADD     reg_acc4, A
  1320            C        ;--------------------------------------
  1321            C                MOV     A, reg_acc5
  1322            C                JBC     STATUS, C
  1323            C                ADD     A, @1
  1324            C                RLC     reg_acc
  1325            C                ADD     A, reg_acc7
  1326            C                MOV     reg_acc5, A
  1327            C                JBC     STATUS, C
  1328            C                BS      reg_acc, 0
  1329            C                RRC     reg_acc
  1330            C        $Mul23_Rs:
  1331            C                RRC     reg_acc5
  1332            C                RRC     reg_acc4
  1333            C                RRC     reg_acc3
  1334            C                RRC     reg_acc2
  1335            C                RRC     reg_acc1
  1336            C        ;
  1337            C                BC      reg_acc, 7
  1338            C                DJZ     reg_acc
  1339            C                JMP     $Mul23_Loop
  1340            C                ENDM
  1341            C        ;
  1342            C        ;**********************************************************************;
  1343            C        ; Title:          (2 bytes) * (4 bytes) operation                      ;
  1344            C        ; Description:    (reg_acc6, reg_acc5) * (reg_acc4, reg_acc3, reg_acc2 ;
  1345            C        ;                 , reg_acc1) = (reg_acc6, reg_acc5, reg_acc4, reg_acc3;
  1346            C        ;                 , reg_acc2, reg_acc1)                                ;
  1347            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5,    ;
  1348            C        ;                 reg_acc6                                             ;
  1349            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5,    ;
  1350            C        ;                 reg_acc6                                             ;
  1351            C        ; Register change:reg_acc, reg_acc7, reg_acc8                          ;
  1352            C        ;**********************************************************************;
  1353            C        ;
  1354            C        mMUL2_4 MACRO   reg_acc6, reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1355            C        ;
  1356            C                MOV     A, @32
  1357            C                MOV     reg_acc, A
  1358            C                MOV     A, reg_acc6
  1359            C                MOV     reg_acc8, A
  1360            C                MOV     A, reg_acc5
  1361            C                MOV     reg_acc7, A
  1362            C                CLR     reg_acc5
  1363            C                CLR     reg_acc6
  1364            C        $Mul24_Loop:
  1365            C                BC      STATUS, C
  1366            C                JBS     reg_acc1, 0
  1367            C                JMP     $Mul24_Rs
  1368            C                MOV     A, reg_acc7
  1369            C                ADD     reg_acc5, A
  1370            C        ;--------------------------------------
  1371            C                MOV     A, reg_acc6
  1372            C                JBC     STATUS, C
  1373            C                ADD     A, @1
  1374            C                RLC     reg_acc
  1375            C                ADD     A, reg_acc8
  1376            C                MOV     reg_acc6, A
  1377            C                JBC     STATUS, C
  1378            C                BS      reg_acc, 0
  1379            C                RRC     reg_acc
  1380            C        $Mul24_Rs:
  1381            C                RRC     reg_acc6
  1382            C                RRC     reg_acc5
  1383            C                RRC     reg_acc4
  1384            C                RRC     reg_acc3
  1385            C                RRC     reg_acc2
  1386            C                RRC     reg_acc1
  1387            C        ;
  1388            C                BC      reg_acc, 7
  1389            C                DJZ     reg_acc
  1390            C                JMP     $Mul24_Loop
  1391            C                ENDM
  1392            C        ;
  1393            C        ;**********************************************************************;
  1394            C        ; Title:          (3 bytes) * (3 bytes) operation                      ;
  1395            C        ; Description:    (reg_acc6, reg_acc5, reg_acc4) * (reg_acc3, reg_acc2 ;
  1396            C        ;                 , reg_acc1) = (reg_acc6, reg_acc5, reg_acc4, reg_acc3;
  1397            C        ;                 , reg_acc2, reg_acc1)                                ;
  1398            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1399            C        ;                 , reg_acc6                                           ;
  1400            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1401            C        ;                 , reg_acc6                                           ;
  1402            C        ; Register change:reg_acc, reg_acc7, reg_acc8, reg_acc9                ;
  1403            C        ;**********************************************************************;
  1404            C        ;
  1405            C        mMUL3_3 MACRO   reg_acc6, reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1406            C        ;
  1407            C                MOV     A, @24
  1408            C                MOV     reg_acc, A
  1409            C                MOV     A, reg_acc4
  1410            C                MOV     reg_acc7, A
  1411            C                MOV     A, reg_acc5
  1412            C                MOV     reg_acc8, A
  1413            C                MOV     A, reg_acc6
  1414            C                MOV     reg_acc9, A
  1415            C                CLR     reg_acc4
  1416            C                CLR     reg_acc5
  1417            C                CLR     reg_acc6
  1418            C        $Mul33_Loop:
  1419            C                BC      STATUS, C
  1420            C                JBS     reg_acc1, 0
  1421            C                JMP     $Mul33_Rs
  1422            C                MOV     A, reg_acc7
  1423            C                ADD     reg_acc4, A
  1424            C        ;--------------------------------------
  1425            C                MOV     A, reg_acc5
  1426            C                JBC     STATUS, C
  1427            C                ADD     A, @1
  1428            C                RLC     reg_acc
  1429            C                ADD     A, reg_acc8
  1430            C                MOV     reg_acc5, A
  1431            C                JBC     STATUS, C
  1432            C                BS      reg_acc, 0
  1433            C                RRC     reg_acc
  1434            C        ;--------------------------------------
  1435            C                MOV     A, reg_acc6
  1436            C                JBC     STATUS, C
  1437            C                ADD     A, @1
  1438            C                RLC     reg_acc
  1439            C                ADD     A, reg_acc9
  1440            C                MOV     reg_acc6, A
  1441            C                JBC     STATUS, C
  1442            C                BS      reg_acc, 0
  1443            C                RRC     reg_acc
  1444            C        $Mul33_Rs:
  1445            C                RRC     reg_acc6
  1446            C                RRC     reg_acc5
  1447            C                RRC     reg_acc4
  1448            C                RRC     reg_acc3
  1449            C                RRC     reg_acc2
  1450            C                RRC     reg_acc1
  1451            C        ;
  1452            C                BC      reg_acc, 7
  1453            C                DJZ     reg_acc
  1454            C                JMP     $Mul33_Loop
  1455            C                ENDM
  1456            C        ;
  1457            C        ;**********************************************************************;
  1458            C        ; Title:          (3 bytes) * (4 bytes) operation                      ;
  1459            C        ; Description:    (reg_acc7, reg_acc6, reg_acc5) * (reg_acc4, reg_acc3 ;
  1460            C        ;                 , reg_acc2, reg_acc1) = (reg_acc7, reg_acc6, reg_acc5;
  1461            C        ;                 , reg_acc4, reg_acc3, reg_acc2, reg_acc1)            ;
  1462            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1463            C        ;                 , reg_acc6, reg_acc7                                 ;
  1464            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4, reg_acc5     ;
  1465            C        ;                 , reg_acc6, reg_acc7                                 ;
  1466            C        ; Register change:reg_acc, reg_acc8, reg_acc9, reg_acca                ;
  1467            C        ;**********************************************************************;
  1468            C        ;
  1469            C        mMUL3_4 MACRO   reg_acc7, reg_acc6, reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1470            C        ;
  1471            C                MOV     A, @32
  1472            C                MOV     reg_acc, A
  1473            C                MOV     A, reg_acc5
  1474            C                MOV     reg_acc8, A
  1475            C                MOV     A, reg_acc6
  1476            C                MOV     reg_acc9, A
  1477            C                MOV     A, reg_acc7
  1478            C                MOV     reg_acca, A
  1479            C                CLR     reg_acc5
  1480            C                CLR     reg_acc6
  1481            C                CLR     reg_acc7
  1482            C        $Mul34_Loop:
  1483            C                BC      STATUS, C
  1484            C                JBS     reg_acc1, 0
  1485            C                JMP     $Mul34_Rs
  1486            C                MOV     A, reg_acc8
  1487            C                ADD     reg_acc5, A
  1488            C        ;--------------------------------------
  1489            C                MOV     A, reg_acc6
  1490            C                JBC     STATUS, C
  1491            C                ADD     A, @1
  1492            C                RLC     reg_acc
  1493            C                ADD     A, reg_acc9
  1494            C                MOV     reg_acc6, A
  1495            C                JBC     STATUS, C
  1496            C                BS      reg_acc, 0
  1497            C                RRC     reg_acc
  1498            C        ;--------------------------------------
  1499            C                MOV     A, reg_acc7
  1500            C                JBC     STATUS, C
  1501            C                ADD     A, @1
  1502            C                RLC     reg_acc
  1503            C                ADD     A, reg_acca
  1504            C                MOV     reg_acc7, A
  1505            C                JBC     STATUS, C
  1506            C                BS      reg_acc, 0
  1507            C                RRC     reg_acc
  1508            C        $Mul34_Rs:
  1509            C                RRC     reg_acc7
  1510            C                RRC     reg_acc6
  1511            C                RRC     reg_acc5
  1512            C                RRC     reg_acc4
  1513            C                RRC     reg_acc3
  1514            C                RRC     reg_acc2
  1515            C                RRC     reg_acc1
  1516            C        ;
  1517            C                BC      reg_acc, 7
  1518            C                DJZ     reg_acc
  1519            C                JMP     $Mul34_Loop
  1520            C                ENDM
  1521            C        ;
  1522            C        ;**********************************************************************;
  1523            C        ; Title:          (4 bytes) * (4 bytes) operation                      ;
  1524            C        ; Description:    (reg_acc8, reg_acc7, reg_acc6, reg_acc5) *           ;
  1525            C        ;                 (reg_acc4, reg_acc3, reg_acc2, reg_acc1)             ;
  1526            C        ;                 = (reg_acc8, reg_acc7, reg_acc6, reg_acc5, reg_acc4  ;
  1527            C        ;                 , reg_acc3, reg_acc2, reg_acc1)                      ;
  1528            C        ; Input:          reg_acc1, reg_acc2, reg_acc3, reg_acc4,              ;
  1529            C        ;                 reg_acc5, reg_acc6, reg_acc7, reg_acc8               ;
  1530            C        ; Output:         reg_acc1, reg_acc2, reg_acc3, reg_acc4,              ;
  1531            C        ;                 reg_acc5, reg_acc6, reg_acc7, reg_acc8               ;
  1532            C        ; Register change:reg_acc, reg_acc9, reg_acca, reg_accb, reg_accc      ;
  1533            C        ;**********************************************************************;
  1534            C        ;
  1535            C        mMUL4_4 MACRO   reg_acc8, reg_acc7, reg_acc6, reg_acc5, reg_acc4, reg_acc3, reg_acc2, reg_acc1
  1536            C        ;
  1537            C                MOV     A, @32
  1538            C                MOV     reg_acc, A
  1539            C                MOV     A, reg_acc5
  1540            C                MOV     reg_acc9, A
  1541            C                MOV     A, reg_acc6
  1542            C                MOV     reg_acca, A
  1543            C                MOV     A, reg_acc7
  1544            C                MOV     reg_accb, A
  1545            C                MOV     A, reg_acc8
  1546            C                MOV     reg_accc, A
  1547            C                CLR     reg_acc5
  1548            C                CLR     reg_acc6
  1549            C                CLR     reg_acc7
  1550            C                CLR     reg_acc8
  1551            C        $Mul44_Loop:
  1552            C                BC      STATUS, C
  1553            C                JBS     reg_acc1, 0
  1554            C                JMP     $Mul44_Rs
  1555            C                MOV     A, reg_acc9
  1556            C                ADD     reg_acc5, A
  1557            C        ;--------------------------------------
  1558            C                MOV     A, reg_acc6
  1559            C                JBC     STATUS, C
  1560            C                ADD     A, @1
  1561            C                RLC     reg_acc
  1562            C                ADD     A, reg_acca
  1563            C                MOV     reg_acc6, A
  1564            C                JBC     STATUS, C
  1565            C                BS      reg_acc, 0
  1566            C                RRC     reg_acc
  1567            C        ;--------------------------------------
  1568            C                MOV     A, reg_acc7
  1569            C                JBC     STATUS, C
  1570            C                ADD     A, @1
  1571            C                RLC     reg_acc
  1572            C                ADD     A, reg_accb
  1573            C                MOV     reg_acc7, A
  1574            C                JBC     STATUS, C
  1575            C                BS      reg_acc, 0
  1576            C                RRC     reg_acc
  1577            C        ;--------------------------------------
  1578            C                MOV     A, reg_acc8
  1579            C                JBC     STATUS, C
  1580            C                ADD     A, @1
  1581            C                RLC     reg_acc
  1582            C                ADD     A, reg_accc
  1583            C                MOV     reg_acc8, A
  1584            C                JBC     STATUS, C
  1585            C                BS      reg_acc, 0
  1586            C                RRC     reg_acc
  1587            C        $Mul44_Rs:
  1588            C                RRC     reg_acc8
  1589            C                RRC     reg_acc7
  1590            C                RRC     reg_acc6
  1591            C                RRC     reg_acc5
  1592            C                RRC     reg_acc4
  1593            C                RRC     reg_acc3
  1594            C                RRC     reg_acc2
  1595            C                RRC     reg_acc1
  1596            C        ;
  1597            C                BC      reg_acc, 7
  1598            C                DJZ     reg_acc
  1599            C                JMP     $Mul44_Loop
  1600            C                ENDM
  1601            C        
  1602            C        
  1603            C        
  1604            C        ;*****************************************************************
  1605            C        ;Function:    generat random data
  1606            C        ;Input:       @banksel,@address,@length
  1607            C        ;Output:      rang by address which is the lowest address
  1608            C        ;description: used common register temp,temp1,temp2 for operation
  1609            C        ;             rand address must be in the same bank
  1610            C        ;             TEMP:  Operate Data TEMP
  1611            C        ;             TEMP1:
  1612            C        ;             TEMP2:
  1613            C        ;*****************************************************************
  1614            C        RAND_FUCTION MACRO @BankSel,Address,@length
  1615            C        	MOV         TEMP,A
  1616            C        	BANK        @BankSel
  1617            C        	MOV         A,Address
  1618            C        	ADD         TEMP,A        ; save latest data as current seed
  1619            C        
  1620            C        	CLR         RSR
  1621            C        $_RAND_SEED_LOOP1:
  1622            C        	MOV         A,R0
  1623            C        	ADD         TEMP,A        ; seed
  1624            C        
  1625            C        	RLC         TEMP          ; x*y+1 MOD z
  1626            C        	RLC         TEMP
  1627            C        	RLC         TEMP
  1628            C        	INC         TEMP
  1629            C        	RRC         TEMP
  1630            C        	RRC         TEMP
  1631            C        	RRC         TEMP
  1632            C        	JBS         STATUS,C
  1633            C        	BC          TEMP,0
  1634            C        	JBC         STATUS,C
  1635            C        	BS          TEMP,0
  1636            C        
  1637            C        	INC         RSR
  1638            C        	MOV         A,RSR
  1639            C        	AND         A,@0X40         ; adding form 0x00 to bank 0
  1640            C        	XOR         A,@0X40
  1641            C        	JBS         STATUS,Z
  1642            C        	JMP         $_RAND_SEED_LOOP1
  1643            C        	MOV         A,R0
  1644            C        	ADD         TEMP,A          ;next seed
  1645            C        
  1646            C        	MOV         A,@length
  1647            C        	MOV         TEMP1,A
  1648            C        	MOV         A,@Address
  1649            C        	MOV         TEMP2,A
  1650            C        	MOV         RSR,A
  1651            C        	BANK        @BankSel
  1652            C        	MOV         A,RSR
  1653            C        	MOV         TEMP2,A       ; save address base
  1654            C        	MESSAGE     "adding form 0x00 to bank 0"
  1655            C        
  1656            C        $_RAND_DATA_LOOP1:
  1657            C        	MOV         A,TEMP2
  1658            C        	MOV         RSR,A
  1659            C        	MOV         A,TEMP
  1660            C        	MOV         R0,A
  1661            C        
  1662            C        	RLC         TEMP          ; X*Y+1 MOD Z
  1663            C        	RLC         TEMP
  1664            C        	RLC         TEMP
  1665            C        	INC         TEMP
  1666            C        	RRC         TEMP
  1667            C        	RRC         TEMP
  1668            C        	RRC         TEMP
  1669            C        	JBS         STATUS,C
  1670            C        	BC          TEMP,0
  1671            C        	JBC         STATUS,C
  1672            C        	BS          TEMP,0
  1673            C        
  1674            C        	INC         TEMP2
  1675            C        	DJZ         TEMP1
  1676            C        	JMP         $_RAND_DATA_LOOP1:
  1677            C        	NOP
  1678            C        
  1679            C        ENDM
  1680            C        
    24                     endif
    25                     
    26                     
    27                     ;----------------------------------------------------
    28                     
    29                     	ORG                 0x1100    ;PAGE 4
    30                     	MESSAGE "define 'keyscan.asm' ROM address"
***     USER MESSAGE: DEFINE 'KEYSCAN.ASM' ROM ADDRESS
    31 01100               Key_Scan:
    32 01100               	JBC                 KeyScanInitFlag/16,KeyScanInitFlag%16
***     error A037:The operand value can not be calculated.
    33 01101 1512          	JMP                 Key_Scan_startup
    34 01102               	BS                  KeyScanInitFlag/16,KeyScanInitFlag%16
***     error A037:The operand value can not be calculated.
    35                     ;========================== Iinitial config ================================
    36                       if ADC_FUNCTION == 1
    37                     	BANK                4
    38                     	MOV                 A,@00000000B
    39                     	MOV                 IOC7,A        ; Set Output
    40                     	MOV                 A,@11111111B
    41                     	MOV                 IOC9,A        ; P97-P94:Input; P93-P90:Input(Default IO)
    42                     	MOV                 A,@0B00001111   ; PB0 PB1 PB2 PB3 As Input
    43                     	MOV                 PBIOCR,A       	;
    44                     	BANK                5
    45                     	MOV                 A,@11110000B
    46                     	MOV                 P9PHCR,A      ; Set Pull Up, P93-P90 disable pull high
    47                     	MOV                 A,@00001111B
    48                     	MOV                 PBPHCR,A      ; PB0 PB1 PB2 PB4 Enable Pull High
    49                     
    50                     	CALL                SUB_RINIT
    51                     	CALL                SUB_ADJ
    52                     
    53                       else
    54 01103 1E04          	BANK                4
    55 01104 1800          	MOV                 A,@00000000B
    56 01105 0040          	MOV                 IOC7,A        ; Set Output
***     error A010:The symbol IOC7 is not defined.
    57 01106 18F0          	MOV                 A,@11110000B
    58 01107 0040          	MOV                 IOC9,A        ; P97-P94:Input; P93-P90:Output(Default IO)
***     error A010:The symbol IOC9 is not defined.
    59 01108 180F          	MOV                 A,@0B00001111   ; PB0 PB1 PB2 PB3 As Input
    60 01109 0040          	MOV                 PBIOCR,A       	;
***     error A010:The symbol PBIOCR is not defined.
    61 0110A 1E05          	BANK                5
    62 0110B 18F0          	MOV                 A,@11110000B
    63 0110C 0040          	MOV                 P9PHCR,A      ; Set Pull Up, P93-P90 disable pull high
***     error A010:The symbol P9PHCR is not defined.
    64 0110D 180F          	MOV                 A,@00001111B
    65 0110E 0040          	MOV                 PBPHCR,A      ; PB0 PB1 PB2 PB4 Enable Pull High
***     error A010:The symbol PBPHCR is not defined.
    66                     
    67 0110F 1329          	CALL               Pre_Discharge
    68 01110 134F          	CALL               SampingRefTiming
    69                     
    70                       endif
    71 01111 0000          	NOP
    72                     
    73 01112               Key_Scan_startup:
    74                      ;===========================================================================
    75                      ;Setting LED Status
    76                      ;===========================================================================
    77 01112 1E02          	BANK                2
    78 01113 0F00          	JBS                 DataF,MODE_13    ; 1:analog  0:digital(default 0),LED light
***     error A010:The symbol DATAF is not defined.
    79 01114 1516          	JMP                 SET_VR_STATUS_0
    80 01115 151A          	JMP                 SET_VR_STATUS_1
    81 01116                 SET_VR_STATUS_0:
    82 01116 0000          	NOP
    83 01117 1E00          	BANK                0
    84 01118               	BC                  LED1_STATUS/16,LED1_STATUS%16		;PORT81
***     error A037:The operand value can not be calculated.
    85 01119 151E          	JMP                 SET_VR_STATUS_END
    86 0111A                 SET_VR_STATUS_1:
    87 0111A 0000          	NOP
    88 0111B 1E00          	BANK                0
    89 0111C               	BS                  LED1_STATUS/16,LED1_STATUS%16		;PORT81
***     error A037:The operand value can not be calculated.
    90 0111D 151E          	JMP                 SET_VR_STATUS_END
    91 0111E                 SET_VR_STATUS_END:
    92 0111E 1E02          	BANK                2
    93 0111F 0000           	NOP
    94                     
    95                     ;================================================================================
    96                     ;Keyscan Main
    97                     ;================================================================================
    98 01120 1178          	CALL                KeyPort_Check
    99 01121 0000          	NOP
   100                     ;--------------------- Judge mode status ------------------------
   101 01122               	JBC                 ModeSelFlag/16,ModeSelFlag%16
***     error A037:The operand value can not be calculated.
   102 01123 152A          	JMP                 MODE_NOCHANGE
   103 01124               	JBS                 ModeSelBakupFlag/16,ModeSelBakupFlag%16
***     error A037:The operand value can not be calculated.
   104 01125 152A          	JMP                 MODE_NOCHANGE
   105 01126 0000          	NOP
   106                   M 	COM                 DataF,MODE_13
       01127 1810     1     MOV A,@( 16 )
       01128 0340     1     XOR  DATAF ,A
***     error A010:The symbol DATAF is not defined.
   107 01129 0000          	NOP
   108 0112A                 MODE_NOCHANGE:
   109                   M 	MOVB                KeyTempBakupFlag,MODE_13,KeyTempFlag,MODE_13
       0112A 0F00     1     JBS  KEYTEMPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPFLAG is not defined.
       0112B 0900     1     BC  KEYTEMPBAKUPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPBAKUPFLAG is not defined.
       0112C 0D00     1     JBC  KEYTEMPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPFLAG is not defined.
       0112D 0B00     1     BS  KEYTEMPBAKUPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPBAKUPFLAG is not defined.
   110 0112E               	BC                  ModeSelFlag/16,ModeSelFlag%16
***     error A037:The operand value can not be calculated.
   111                     
   112                     ;---------------- Deal with DataA/DataB/DataC/DataD/DataG-----------------
   113                       if ADC_FUNCTION == 1
   114                     	NOP
   115                     	CALL                ADC_Rocker_KeyScan
   116                     	NOP
   117                       else
   118 0112F 0000          	NOP
   119 01130 130F          	CALL                IO_Rocker_KeyScan
   120 01131 0000          	NOP
   121                       endif
   122                     
   123 01132 0000          	NOP
   124 01133 127D          	CALL                Rocker_KeyScan
   125 01134 0000          	NOP
   126 01135 11B4          	CALL                Direction_KeyCheck
   127                     
   128                     ;-----------------------deal with DataE------------------------------------------
   129                     ; bit7  bit6  bit5  bit4  bit3  bit2  bit1  bit0
   130                     ; A_1   B_2   C_3   D_4   L1_5  R1_6  L2_7  R2_8
   131                     ;--------------------------------------------------------------------------------
   132 01136 00C0          	CLR                 TEMP
***     error A010:The symbol TEMP is not defined.
   133                   M 	MOVB                TEMP,A_1,LINE2_KEY_INPUT_CACHE,_A
       01137 0FC0     1     JBS  LINE2_KEY_INPUT_CACHE , _A 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01138 0800     1     BC  TEMP , A_1 
***     error A010:The symbol TEMP is not defined.
       01139 0DC0     1     JBC  LINE2_KEY_INPUT_CACHE , _A 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       0113A 0A00     1     BS  TEMP , A_1 
***     error A010:The symbol TEMP is not defined.
   134                   M 	MOVB                TEMP,B_2,LINE3_KEY_INPUT_CACHE,_B
       0113B 0F80     1     JBS  LINE3_KEY_INPUT_CACHE , _B 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       0113C 0840     1     BC  TEMP , B_2 
***     error A010:The symbol TEMP is not defined.
       0113D 0D80     1     JBC  LINE3_KEY_INPUT_CACHE , _B 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       0113E 0A40     1     BS  TEMP , B_2 
***     error A010:The symbol TEMP is not defined.
   135                   M 	MOVB                TEMP,C_3,LINE4_KEY_INPUT_CACHE,_C
       0113F 0F40     1     JBS  LINE4_KEY_INPUT_CACHE , _C 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       01140 0880     1     BC  TEMP , C_3 
***     error A010:The symbol TEMP is not defined.
       01141 0D40     1     JBC  LINE4_KEY_INPUT_CACHE , _C 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       01142 0A80     1     BS  TEMP , C_3 
***     error A010:The symbol TEMP is not defined.
   136                   M 	MOVB                TEMP,D_4,LINE5_KEY_INPUT_CACHE,_D
       01143 0F00     1     JBS  LINE5_KEY_INPUT_CACHE , _D 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01144 08C0     1     BC  TEMP , D_4 
***     error A010:The symbol TEMP is not defined.
       01145 0D00     1     JBC  LINE5_KEY_INPUT_CACHE , _D 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01146 0AC0     1     BS  TEMP , D_4 
***     error A010:The symbol TEMP is not defined.
   137                   M 	MOVB                TEMP,L1_5,LINE3_KEY_INPUT_CACHE,_L1
       01147 0FC0     1     JBS  LINE3_KEY_INPUT_CACHE , _L1 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       01148 0900     1     BC  TEMP , L1_5 
***     error A010:The symbol TEMP is not defined.
       01149 0DC0     1     JBC  LINE3_KEY_INPUT_CACHE , _L1 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       0114A 0B00     1     BS  TEMP , L1_5 
***     error A010:The symbol TEMP is not defined.
   138                   M 	MOVB                TEMP,R1_6,LINE4_KEY_INPUT_CACHE,_R1
       0114B 0F80     1     JBS  LINE4_KEY_INPUT_CACHE , _R1 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0114C 0940     1     BC  TEMP , R1_6 
***     error A010:The symbol TEMP is not defined.
       0114D 0D80     1     JBC  LINE4_KEY_INPUT_CACHE , _R1 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0114E 0B40     1     BS  TEMP , R1_6 
***     error A010:The symbol TEMP is not defined.
   139                   M 	MOVB                TEMP,L2_7,LINE2_KEY_INPUT_CACHE,_L2
       0114F 0F40     1     JBS  LINE2_KEY_INPUT_CACHE , _L2 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01150 0980     1     BC  TEMP , L2_7 
***     error A010:The symbol TEMP is not defined.
       01151 0D40     1     JBC  LINE2_KEY_INPUT_CACHE , _L2 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01152 0B80     1     BS  TEMP , L2_7 
***     error A010:The symbol TEMP is not defined.
   140                   M 	MOVB                TEMP,R2_8,LINE3_KEY_INPUT_CACHE,_R2
       01153 0F00     1     JBS  LINE3_KEY_INPUT_CACHE , _R2 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       01154 09C0     1     BC  TEMP , R2_8 
***     error A010:The symbol TEMP is not defined.
       01155 0D00     1     JBC  LINE3_KEY_INPUT_CACHE , _R2 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       01156 0BC0     1     BS  TEMP , R2_8 
***     error A010:The symbol TEMP is not defined.
   141 01157 0400          	MOV                 A,TEMP
***     error A010:The symbol TEMP is not defined.
   142 01158 0240          	OR                  DataE,A
***     error A010:The symbol DATAE is not defined.
   143                     
   144                     ;-----------------------deal with DataF------------------------------------------
   145                     ; bit0      bit1      bit2     bit3     bit4     bit5      bit6      bit7
   146                     ; Select_9  Start_10  LSW_11   RSW_12   MODE_13  MACRO_14  TEST1_15  TEST2_16
   147                     ;--------------------------------------------------------------------------------
   148                     	;CLR                 DataF
   149                   M 	MOVB                DataF,SELECT_9,LINE4_KEY_INPUT_CACHE,_Select
       01159 0FC0     1     JBS  LINE4_KEY_INPUT_CACHE , _SELECT 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0115A 0800     1     BC  DATAF , SELECT_9 
***     error A010:The symbol DATAF is not defined.
       0115B 0DC0     1     JBC  LINE4_KEY_INPUT_CACHE , _SELECT 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0115C 0A00     1     BS  DATAF , SELECT_9 
***     error A010:The symbol DATAF is not defined.
   150                   M 	MOVB                DataF,Start_10,LINE5_KEY_INPUT_CACHE,_Start
       0115D 0F80     1     JBS  LINE5_KEY_INPUT_CACHE , _START 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       0115E 0840     1     BC  DATAF , START_10 
***     error A010:The symbol DATAF is not defined.
       0115F 0D80     1     JBC  LINE5_KEY_INPUT_CACHE , _START 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01160 0A40     1     BS  DATAF , START_10 
***     error A010:The symbol DATAF is not defined.
   151                   M 	MOVB                DataF,LSW_11,LINE5_KEY_INPUT_CACHE,_LSW
       01161 0FC0     1     JBS  LINE5_KEY_INPUT_CACHE , _LSW 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01162 0880     1     BC  DATAF , LSW_11 
***     error A010:The symbol DATAF is not defined.
       01163 0DC0     1     JBC  LINE5_KEY_INPUT_CACHE , _LSW 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01164 0A80     1     BS  DATAF , LSW_11 
***     error A010:The symbol DATAF is not defined.
   152                   M 	MOVB                DataF,RSW_12,LINE2_KEY_INPUT_CACHE,_RSW
       01165 0F00     1     JBS  LINE2_KEY_INPUT_CACHE , _RSW 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01166 08C0     1     BC  DATAF , RSW_12 
***     error A010:The symbol DATAF is not defined.
       01167 0D00     1     JBC  LINE2_KEY_INPUT_CACHE , _RSW 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01168 0AC0     1     BS  DATAF , RSW_12 
***     error A010:The symbol DATAF is not defined.
   153                     	;MOVB                DataF,MODE_13,LINE3_KEY_INPUT_CACHE,_MODE
   154                   M 	MOVB                DataF,MACRO_14,LINE4_KEY_INPUT_CACHE,_MACRO
       01169 0F00     1     JBS  LINE4_KEY_INPUT_CACHE , _MACRO 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0116A 0940     1     BC  DATAF , MACRO_14 
***     error A010:The symbol DATAF is not defined.
       0116B 0D00     1     JBC  LINE4_KEY_INPUT_CACHE , _MACRO 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       0116C 0B40     1     BS  DATAF , MACRO_14 
***     error A010:The symbol DATAF is not defined.
   155                   M 	MOVB                DataF,TEST1_15,LINE2_KEY_INPUT_CACHE,_TEST1
       0116D 0F80     1     JBS  LINE2_KEY_INPUT_CACHE , _TEST1 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       0116E 0980     1     BC  DATAF , TEST1_15 
***     error A010:The symbol DATAF is not defined.
       0116F 0D80     1     JBC  LINE2_KEY_INPUT_CACHE , _TEST1 
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
       01170 0B80     1     BS  DATAF , TEST1_15 
***     error A010:The symbol DATAF is not defined.
   156                   M 	MOVB                DataF,TEST2_16,LINE5_KEY_INPUT_CACHE,_TEST2
       01171 0F40     1     JBS  LINE5_KEY_INPUT_CACHE , _TEST2 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01172 09C0     1     BC  DATAF , TEST2_16 
***     error A010:The symbol DATAF is not defined.
       01173 0D40     1     JBC  LINE5_KEY_INPUT_CACHE , _TEST2 
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
       01174 0BC0     1     BS  DATAF , TEST2_16 
***     error A010:The symbol DATAF is not defined.
   157                     
   158 01175 0000          	NOP
   159 01176 0012          	RET
   160 01177 0000          	NOP
   161                     
   162                     ;===========================================================================
   163                     ;Scan data form keyboard port
   164                     ;===========================================================================
   165 01178               KeyPort_Check:
   166                     ;LINE1:	read direct data from PortB to LINE1_KEY_INPUT
   167 01178 1E00          	BANK                0
   168 01179 0400          	MOV                 A,PORTB		;PortB = 00110110
***     error A010:The symbol PORTB is not defined.
   169 0117A 1E02          	BANK                2
   170 0117B 0040          	MOV                 LINE1_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   171 0117C 04C0          	COM                 LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   172 0117D 180F          	MOV                 A,@_Directions
   173 0117E 02C0          	AND                 LINE1_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   174                     
   175                     ;LINE2:	;SET P77=1 P76=1 P75=1 P74=0
   176 0117F 1E00          	BANK                0
   177 01180 18E8          	MOV                 A,@11101000B
   178 01181 0040          	MOV                 PORT7,A
***     error A010:The symbol PORT7 is not defined.
   179 01182 123A          	CALL                KEY_DELAY
   180 01183 0400          	MOV                 A,PORT9
***     error A010:The symbol PORT9 is not defined.
   181 01184 1E02          	BANK                2
   182 01185 0040          	MOV                 LINE2_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
   183 01186 04C0          	COM                 LINE2_KEY_INPUT_CACHE
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
   184 01187 18F0          	MOV                 A,@0XF0
   185 01188 02C0          	AND                 LINE2_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE2_KEY_INPUT_CACHE is not defined.
   186                     
   187                     ;LINE3:	;SET P77=1 P76=1 P75=0 P74=1
   188 01189 1E00          	BANK                0
   189 0118A 18D8          	MOV                 A,@11011000B
   190 0118B 0040          	MOV                 PORT7,A
***     error A010:The symbol PORT7 is not defined.
   191 0118C 123A          	CALL                KEY_DELAY
   192 0118D 0400          	MOV                 A,PORT9
***     error A010:The symbol PORT9 is not defined.
   193 0118E 1E02          	BANK                2
   194 0118F 0040          	MOV                 LINE3_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
   195 01190 04C0          	COM                 LINE3_KEY_INPUT_CACHE
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
   196 01191 18F0          	MOV                 A,@0XF0
   197 01192 02C0          	AND                 LINE3_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
   198                     
   199                     ;LINE4:	;SET P77=1 P76=0 P75=1 P74=1
   200 01193 1E00          	BANK                0
   201 01194 18B8          	MOV                 A,@10111000B
   202 01195 0040          	MOV                 PORT7,A
***     error A010:The symbol PORT7 is not defined.
   203 01196 123A          	CALL                KEY_DELAY
   204 01197 0400          	MOV                 A,PORT9
***     error A010:The symbol PORT9 is not defined.
   205 01198 1E02          	BANK                2
   206 01199 0040          	MOV                 LINE4_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
   207 0119A 04C0          	COM                 LINE4_KEY_INPUT_CACHE
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
   208 0119B 18F0          	MOV                 A,@0XF0
   209 0119C 02C0          	AND                 LINE4_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
   210                     
   211                     ;LINE5:	;SET P77=0 P76=1 P75=1 P74=1
   212 0119D 1E00          	BANK                0
   213 0119E 1878          	MOV                 A,@01111000B
   214 0119F 0040          	MOV                 PORT7,A
***     error A010:The symbol PORT7 is not defined.
   215 011A0 123A          	CALL                KEY_DELAY
   216 011A1 0400          	MOV                 A,PORT9
***     error A010:The symbol PORT9 is not defined.
   217 011A2 1E02          	BANK                2
   218 011A3 0040          	MOV                 LINE5_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
   219 011A4 04C0          	COM                 LINE5_KEY_INPUT_CACHE
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
   220 011A5 18F0          	MOV                 A,@0XF0
   221 011A6 02C0          	AND                 LINE5_KEY_INPUT_CACHE,A
***     error A010:The symbol LINE5_KEY_INPUT_CACHE is not defined.
   222 011A7 0000          	NOP
   223                     
   224                     ;----------------------------------------------------------------
   225                   M 	MOVB                KeyTempFlag,MODE_13,LINE3_KEY_INPUT_CACHE,_MODE  ;save MODE FLAG
       011A8 0F40     1     JBS  LINE3_KEY_INPUT_CACHE , _MODE 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       011A9 0900     1     BC  KEYTEMPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPFLAG is not defined.
       011AA 0D40     1     JBC  LINE3_KEY_INPUT_CACHE , _MODE 
***     error A010:The symbol LINE3_KEY_INPUT_CACHE is not defined.
       011AB 0B00     1     BS  KEYTEMPFLAG , MODE_13 
***     error A010:The symbol KEYTEMPFLAG is not defined.
   226                   M 	MOVB                KeyTempFlag,MACRO_14,LINE4_KEY_INPUT_CACHE,_MACRO ;save MACRO FLAG
       011AC 0F00     1     JBS  LINE4_KEY_INPUT_CACHE , _MACRO 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       011AD 0940     1     BC  KEYTEMPFLAG , MACRO_14 
***     error A010:The symbol KEYTEMPFLAG is not defined.
       011AE 0D00     1     JBC  LINE4_KEY_INPUT_CACHE , _MACRO 
***     error A010:The symbol LINE4_KEY_INPUT_CACHE is not defined.
       011AF 0B40     1     BS  KEYTEMPFLAG , MACRO_14 
***     error A010:The symbol KEYTEMPFLAG is not defined.
   227 011B0 0000          	NOP
   228 011B1 0000          	NOP
   229 011B2 0012          	RET
   230 011B3 0000          	NOP
   231                     
   232                     ;==============================================================================
   233                     ;=======================Direction key board scan===============================
   234                     ;==============================================================================
   235                     ;------------------------deal with DataA/DataB---------------------------------
   236                     ;DataA	left-right: left=0x00, right=0xff, no-left-right=0x7f
   237                     ;DataB	up-down:    down=0x00, up=0xff,    no-left-right=0x7f
   238                     ;DataG  000:00¡¯ 001:45¡¯ 010:90¡¯ 011:135¡¯ 100:180¡¯ 101:225¡¯ 110:270¡¯ 111:315¡¯
   239                     ;------------------------------------------------------------------------------
   240 011B4               Direction_KeyCheck:
   241 011B4 0000          	NOP
   242 011B5 0F00          	JBS                 DataF,MODE_13
***     error A010:The symbol DATAF is not defined.
   243 011B6 15B8          	JMP                 DealWith_Direction_Digital
   244 011B7 15F7          	JMP                 DealWith_HatSwitch_Analog
   245                     
   246 011B8               DealWith_Direction_Digital:
   247 011B8               LEFT_RIGHT_KEY:
   248 011B8 0C00          	JBC                 LINE1_KEY_INPUT_CACHE,_RIGHT   ;judge right
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   249 011B9 15BD          	JMP                 JudgeRight
   250 011BA 0C40          	JBC                 LINE1_KEY_INPUT_CACHE,_LEFT    ;judeg left
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   251 011BB 15C8          	JMP                 JudgeLeft
   252 011BC 15D2          	JMP                 Left_Right_Finsh
   253 011BD                 JudgeRight:
   254 011BD 1800          	MOV                 A,@0X00
   255 011BE 0300          	XOR                 A,DataA
***     error A010:The symbol DATAA is not defined.
   256 011BF 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   257 011C0 15C2          	JMP                 JudgeRight_1
   258 011C1 15C4          	JMP                 JudgeRight_2
   259 011C2                 JudgeRight_1:
   260 011C2 18FF          	MOV                 A,@0XFF
   261 011C3 15C6          	JMP                 JudgeRight_End
   262 011C4                 JudgeRight_2:
   263 011C4 187F          	MOV                 A,@0X7F
   264 011C5 15C6          	JMP                 JudgeRight_End
   265 011C6                 JudgeRight_End:
   266 011C6 0040          	MOV                 DataA,A
***     error A010:The symbol DATAA is not defined.
   267 011C7 15D2          	JMP                 Left_Right_Finsh
   268                     
   269 011C8                 JudgeLeft:
   270 011C8 18FF          	MOV                 A,@0XFF
   271 011C9 0300          	XOR                 A,DataA
***     error A010:The symbol DATAA is not defined.
   272 011CA 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   273 011CB 15CD          	JMP                 JudgeLeft_1  ;Z=0,sameness
   274 011CC 15CF          	JMP                 JudgeLeft_2  ;Z=1,reverse
   275 011CD                 JudgeLeft_1:
   276 011CD 1800          	MOV                 A,@0X00
   277 011CE 15D1          	JMP                 JudgeLeft_End
   278 011CF                 JudgeLeft_2:
   279 011CF 187F          	MOV                 A,@0X7F
   280 011D0 15D1          	JMP                 JudgeLeft_End
   281 011D1                 JudgeLeft_End:
   282 011D1 0040          	MOV                 DataA,A
***     error A010:The symbol DATAA is not defined.
   283 011D2                 Left_Right_Finsh:
   284 011D2 0000          	NOP
   285                     ;--------------------------------------------------------------
   286 011D3               UP_DOWN_KEY:
   287 011D3 0CC0          	JBC                 LINE1_KEY_INPUT_CACHE,_UP     ;judge up(0X00)
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   288 011D4 15E3          	JMP                 JudgeDown
   289 011D5 0C80          	JBC                 LINE1_KEY_INPUT_CACHE,_DOWN   ;judeg down(0XFF)
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   290 011D6 15D8          	JMP                 JudgeUp
   291 011D7 15EE          	JMP                 UP_DOWN_Finsh
   292 011D8                 JudgeUp:
   293 011D8 1800          	MOV                 A,@0X00
   294 011D9 0300          	XOR                 A,DataB
***     error A010:The symbol DATAB is not defined.
   295 011DA 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   296 011DB 15DD          	JMP                 JudgeUp_1
   297 011DC 15DF          	JMP                 JudgeUp_2
   298 011DD                 JudgeUp_1:
   299 011DD 18FF          	MOV                 A,@0XFF
   300 011DE 15E1          	JMP                 JudgeUp_End
   301 011DF                 JudgeUp_2:
   302 011DF 187F          	MOV                 A,@0X7F
   303 011E0 15E1          	JMP                 JudgeUp_End
   304 011E1                 JudgeUp_End:
   305 011E1 0040          	MOV                 DataB,A
***     error A010:The symbol DATAB is not defined.
   306 011E2 15EE          	JMP                 UP_DOWN_Finsh
   307                     
   308 011E3                 JudgeDown:
   309 011E3 18FF          	MOV                 A,@0XFF
   310 011E4 0300          	XOR                 A,DataB
***     error A010:The symbol DATAB is not defined.
   311 011E5 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   312 011E6 15E8          	JMP                 JudgeDown_1
   313 011E7 15EA          	JMP                 JudgeDown_2
   314 011E8                 JudgeDown_1:
   315 011E8 1800          	MOV                 A,@0X00
   316 011E9 15EC          	JMP                 JudgeDown_End
   317 011EA                 JudgeDown_2:
   318 011EA 187F          	MOV                 A,@0X7F
   319 011EB 15EC          	JMP                 JudgeDown_End
   320 011EC                 JudgeDown_End:
   321 011EC 0040          	MOV                 DataB,A
***     error A010:The symbol DATAB is not defined.
   322 011ED 15EE          	JMP                 UP_DOWN_Finsh
   323 011EE                 UP_DOWN_Finsh:
   324 011EE 0000          	NOP
   325 011EF 187F          	MOV                 A,@0X7F
   326 011F0 0040          	MOV                 DataC,A
***     error A010:The symbol DATAC is not defined.
   327 011F1 0040          	MOV                 DataD,A
***     error A010:The symbol DATAD is not defined.
   328 011F2 180F            	MOV                 A,@0X0F
   329 011F3 0040            	MOV                 DataG,A
***     error A010:The symbol DATAG is not defined.
   330 011F4 0000          	NOP
   331 011F5 0012          	RET
   332 011F6 0000          	NOP
   333                     
   334                     ;----------------------------------------------------
   335 011F7               DealWith_HatSwitch_Analog:
   336 011F7 00C0          	CLR                 DataE
***     error A010:The symbol DATAE is not defined.
   337 011F8 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   338 011F9 1B00          	XOR                 A,@0B00000000
   339 011FA 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   340 011FB 15FF          	JMP                 DATAG_0
   341                   M 	MOV                 DataG,@0X0F          ;none
       011FC 180F     1     MOV A,@( 15 )
       011FD 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   342 011FE 1637          	JMP                 HAT_SWITCH_END
   343 011FF                 DataG_0:
   344 011FF 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   345 01200 1B20          	XOR                 A,@0B00100000
   346 01201 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   347 01202 1606          	JMP                 DataG_45
   348                   M 	MOV                 DataG,@0X00          ;0
       01203 1800     1     MOV A,@( 0 )
       01204 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   349 01205 1637          	JMP                 HAT_SWITCH_END
   350 01206                 DataG_45:
   351 01206 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   352 01207 1B30          	XOR                 A,@0B00110000
   353 01208 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   354 01209 160D          	JMP                 DataG_90
   355                   M 	MOV                 DataG,@0X01          ;45
       0120A 1801     1     MOV A,@( 1 )
       0120B 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   356 0120C 1637          	JMP                 HAT_SWITCH_END
   357 0120D                 DataG_90:
   358 0120D 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   359 0120E 1B10          	XOR                 A,@0B00010000
   360 0120F 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   361 01210 1614          	JMP                 DataG_135
   362                   M 	MOV                 DataG,@0X02          ;90
       01211 1802     1     MOV A,@( 2 )
       01212 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   363 01213 1637          	JMP                 HAT_SWITCH_END
   364 01214                 DataG_135:
   365 01214 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   366 01215 1B14          	XOR                 A,@0B00010100
   367 01216 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   368 01217 161B          	JMP                 DataG_180
   369                   M 	MOV                 DataG,@0X03          ;135
       01218 1803     1     MOV A,@( 3 )
       01219 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   370 0121A 1637          	JMP                 HAT_SWITCH_END
   371 0121B                 DataG_180:
   372 0121B 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   373 0121C 1B04          	XOR                 A,@0B00000100
   374 0121D 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   375 0121E 1622          	JMP                 DataG_225
   376                   M 	MOV                 DataG,@0X04          ;180
       0121F 1804     1     MOV A,@( 4 )
       01220 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   377 01221 1637          	JMP                 HAT_SWITCH_END
   378 01222                 DataG_225:
   379 01222 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   380 01223 1B06          	XOR                 A,@0B00000110
   381 01224 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   382 01225 1629          	JMP                 DataG_270
   383                   M 	MOV                 DataG,@0X05          ;225
       01226 1805     1     MOV A,@( 5 )
       01227 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   384 01228 1637          	JMP                 HAT_SWITCH_END
   385 01229                 DataG_270:
   386 01229 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   387 0122A 1B02          	XOR                 A,@0B00000010
   388 0122B 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   389 0122C 1630          	JMP                 DataG_315
   390                   M 	MOV                 DataG,@0X06          ;270
       0122D 1806     1     MOV A,@( 6 )
       0122E 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   391 0122F 1637          	JMP                 HAT_SWITCH_END
   392 01230                 DataG_315:
   393 01230 0400          	MOV                 A,LINE1_KEY_INPUT_CACHE
***     error A010:The symbol LINE1_KEY_INPUT_CACHE is not defined.
   394 01231 1B22          	XOR                 A,@0B00100010
   395 01232 0E00          	JBS                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   396 01233 1637          	JMP                 HAT_SWITCH_END
   397                   M 	MOV                 DataG,@0X07          ;315
       01234 1807     1     MOV A,@( 7 )
       01235 0040     1     MOV  DATAG ,A
***     error A010:The symbol DATAG is not defined.
   398 01236 1637          	JMP                 HAT_SWITCH_END
   399                     
   400 01237                 HAT_SWITCH_END:
   401 01237 0000          	NOP
   402 01238 0012          	RET
   403 01239 0000          	NOP
   404                     
   405                     ;===================================================================
   406                     ; Delay function
   407                     ;===================================================================
   408 0123A               KEY_DELAY:
   409 0123A 0000          	NOP
   410 0123B 0000          	NOP
   411 0123C 0000          	NOP
   412 0123D 0000          	NOP
   413 0123E 0000          	NOP
   414 0123F 0000          	NOP
   415 01240 0000          	NOP
   416 01241 0012          	RET
   417 01242 0000          	NOP
   418                     
   419                     
   420                     ;============================================================================
   421                     ;file name:     ADC 3D Rocker KeyScan
   422                     ;INPUT PORT:
   423                     ;OUTPUT PORT:   KEY_LEFT_X,KEY_LEFT_Y,KEY_RIGHT_X,KEY_RIGHT_Y
   424                     ;TIME:          1050uS
   425                     ;Descrition:    Use for check AD rocker data
   426                     ;============================================================================
   427 01243               ADC_Rocker_KeyScan:
   428                     
   429 01243 0000          	NOP
   430 01244 1E03          	BANK                 3
   431 01245 0A00          	BS                   ADCR,ADP
***     error A010:The symbol ADP is not defined.
***     error A010:The symbol ADCR is not defined.
   432 01246 00C0          	CLR                  ADDH
***     error A010:The symbol ADDH is not defined.
   433 01247 0400          	MOV                  A,ADCR
***     error A010:The symbol ADCR is not defined.
   434 01248 1AF0          	AND                  A,@0B11110000
   435 01249 1980          	OR                   A,@0B10000000
   436 0124A 0040          	MOV                  ADCR,A              ;Select ADE0/P93.Rx
***     error A010:The symbol ADCR is not defined.
   437 0124B 1308          	CALL                 SUB_ADC
   438 0124C 0400          	MOV                  A,ADDH
***     error A010:The symbol ADDH is not defined.
   439 0124D 1E02          	BANK                 2
   440 0124E 0040          	MOV                  KEY_RIGHT_X,A
***     error A010:The symbol KEY_RIGHT_X is not defined.
   441                     
   442 0124F 1E03          	BANK                 3
   443 01250 00C0          	CLR                  ADDH
***     error A010:The symbol ADDH is not defined.
   444 01251 0400          	MOV                  A,ADCR
***     error A010:The symbol ADCR is not defined.
   445 01252 1AF0          	AND                  A,@0B11110000
   446 01253 1901          	OR                   A,@0B00000001
   447 01254 0040          	MOV                  ADCR,A              ;Select ADE1/P92.Ry
***     error A010:The symbol ADCR is not defined.
   448 01255 1805          	MOV                  A,@5
   449 01256 1EA0          	LCALL                DELAY_X10US
   449 01257 0000          	LCALL                DELAY_X10US
***     error A010:The symbol DELAY_X10US is not defined.
   450 01258 1308          	CALL                 SUB_ADC
   451 01259 0400          	MOV                  A,ADDH
***     error A010:The symbol ADDH is not defined.
   452 0125A 1E02          	BANK                 2
   453 0125B 0040          	MOV                  KEY_RIGHT_Y,A
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   454 0125C 04C0          	COM                  KEY_RIGHT_Y
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   455                     
   456 0125D 1E03          	BANK                 3
   457 0125E 00C0          	CLR                  ADDH
***     error A010:The symbol ADDH is not defined.
   458 0125F 0400          	MOV                  A,ADCR
***     error A010:The symbol ADCR is not defined.
   459 01260 1AF0          	AND                  A,@0B11110000
   460 01261 1902          	OR                   A,@0B00000010
   461 01262 0040          	MOV                  ADCR,A              ;Select ADE2/P91.Lx
***     error A010:The symbol ADCR is not defined.
   462 01263 1805          	MOV                  A,@5
   463 01264 1EA0          	LCALL                DELAY_X10US
   463 01265 0000          	LCALL                DELAY_X10US
***     error A010:The symbol DELAY_X10US is not defined.
   464 01266 1308          	CALL                 SUB_ADC
   465 01267 0400          	MOV                  A,ADDH
***     error A010:The symbol ADDH is not defined.
   466 01268 1E02          	BANK                 2
   467 01269 0040          	MOV                  KEY_LEFT_X,A
***     error A010:The symbol KEY_LEFT_X is not defined.
   468                     
   469 0126A 1E03          	BANK                 3
   470 0126B 00C0          	CLR                  ADDH
***     error A010:The symbol ADDH is not defined.
   471 0126C 0400          	MOV                  A,ADCR
***     error A010:The symbol ADCR is not defined.
   472 0126D 1AF0          	AND                  A,@0B11110000
   473 0126E 1903          	OR                   A,@0B00000011
   474 0126F 0040          	MOV                  ADCR,A              ;Select ADE3/P90.Ly
***     error A010:The symbol ADCR is not defined.
   475 01270 1805          	MOV                  A,@5
   476 01271 1EA0          	LCALL                DELAY_X10US
   476 01272 0000          	LCALL                DELAY_X10US
***     error A010:The symbol DELAY_X10US is not defined.
   477 01273 1308          	CALL                 SUB_ADC
   478 01274 0400          	MOV                  A,ADDH
***     error A010:The symbol ADDH is not defined.
   479 01275 1E02          	BANK                 2
   480 01276 0040          	MOV                  KEY_LEFT_Y,A
***     error A010:The symbol KEY_LEFT_Y is not defined.
   481 01277 04C0          	COM                  KEY_LEFT_Y
***     error A010:The symbol KEY_LEFT_Y is not defined.
   482 01278 1E03          	BANK                 3
   483 01279 0800          	BC                   ADCR,ADP
***     error A010:The symbol ADP is not defined.
***     error A010:The symbol ADCR is not defined.
   484                     
   485                     	;bank                 2
   486                     	;mov                  a,@0x7f
   487                     	;mov                  key_right_x,a
   488                     	;mov                  key_right_y,a
   489                     	;mov                  key_left_x,a
   490                     	;mov                  key_left_y,a
   491                     
   492 0127A 0000          	NOP
   493 0127B 0012          	RET
   494 0127C 0000          	NOP
   495                     
   496 0127D               Rocker_KeyScan:
   497                     ;======================== jugde rocker signal select ==========================
   498 0127D 1E02          	BANK                2
   499 0127E 0F00          	JBS                 DataF,MODE_13       ;select digital or analog
***     error A010:The symbol DATAF is not defined.
   500 0127F 1681          	JMP                 DealWith_ADC_Digital
   501 01280 1697          	JMP                 DealWith_ADC_Analog
   502                     
   503 01281                 DealWith_ADC_Digital:
   504 01281 00C0          	CLR                 DataA
***     error A010:The symbol DATAA is not defined.
   505 01282 0400          	MOV                 A,KEY_LEFT_X		;L-left_right
***     error A010:The symbol KEY_LEFT_X is not defined.
   506 01283 0040          	MOV                 TEMP1,A
***     error A010:The symbol TEMP1 is not defined.
   507 01284 12A3          	CALL                AreaJudge_direction
   508 01285 0040          	MOV                 DataA,A
***     error A010:The symbol DATAA is not defined.
   509                     
   510 01286 00C0          	CLR                 DataB
***     error A010:The symbol DATAB is not defined.
   511 01287 0400          	MOV                 A,KEY_LEFT_Y		;L-up_down
***     error A010:The symbol KEY_LEFT_Y is not defined.
   512 01288 0040          	MOV                 TEMP1,A
***     error A010:The symbol TEMP1 is not defined.
   513 01289 12A3          	CALL                AreaJudge_direction
   514 0128A 0040          	MOV                 DataB,A
***     error A010:The symbol DATAB is not defined.
   515                     
   516 0128B 187F          	MOV                 A,@0X7F
   517 0128C 0040          	MOV                 DataC,A
***     error A010:The symbol DATAC is not defined.
   518 0128D 0040          	MOV                 DataD,A
***     error A010:The symbol DATAD is not defined.
   519                     
   520 0128E 00C0          	CLR                 DataE
***     error A010:The symbol DATAE is not defined.
   521 0128F 0400          	MOV                 A,KEY_RIGHT_X		;A,B,C,D,
***     error A010:The symbol KEY_RIGHT_X is not defined.
   522 01290 0040          	MOV                 TEMP2,A
***     error A010:The symbol TEMP2 is not defined.
   523 01291 0400          	MOV                 A,KEY_RIGHT_Y
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   524 01292 0040          	MOV                 TEMP3,A
***     error A010:The symbol TEMP3 is not defined.
   525 01293 12B7          	CALL                AreaJudge_Button
   526 01294 0400          	MOV                 A,TEMP
***     error A010:The symbol TEMP is not defined.
   527 01295 0040          	MOV                 DataE,A
***     error A010:The symbol DATAE is not defined.
   528 01296 16A0          	JMP                 RockerCheakFinish
   529                     
   530 01297                 DealWith_ADC_Analog:
   531 01297 0400          	MOV                 A,KEY_LEFT_X		;L-left_right
***     error A010:The symbol KEY_LEFT_X is not defined.
   532 01298 0040          	MOV                 DataA,A
***     error A010:The symbol DATAA is not defined.
   533 01299 0400          	MOV                 A,KEY_LEFT_Y		;L-up_down
***     error A010:The symbol KEY_LEFT_Y is not defined.
   534 0129A 0040          	MOV                 DataB,A
***     error A010:The symbol DATAB is not defined.
   535 0129B 0400          	MOV                 A,KEY_RIGHT_X		;R-left_right
***     error A010:The symbol KEY_RIGHT_X is not defined.
   536 0129C 0040          	MOV                 DataC,A
***     error A010:The symbol DATAC is not defined.
   537 0129D 0400          	MOV                 A,KEY_RIGHT_Y		;R-up_down
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   538 0129E 0040          	MOV                 DataD,A
***     error A010:The symbol DATAD is not defined.
   539 0129F 16A0          	JMP                 RockerCheakFinish
   540                     
   541 012A0                 RockerCheakFinish:
   542 012A0 0000          	NOP
   543 012A1 0012          	RET
   544 012A2 0000          	NOP
   545                     
   546                     ;=============================jugde the direction=====================================
   547                     ;Input:      TEMP1
   548                     ;output:     A
   549                     ;=====================================================================================
   550 012A3               AreaJudge_direction:
   551 012A3 1E02          	BANK                2
   552 012A4 0400          	MOV                 A,TEMP1     ;Store
***     error A010:The symbol TEMP1 is not defined.
   553 012A5 1DBF          	SUB                 A,@0XBF
   554 012A6 0E00          	JBS                 R3,0        ;R3,bit0(C)
***     error A010:The symbol R3 is not defined.
   555 012A7 16A9          	JMP                 CheakTop_Left
   556 012A8 16AB          	JMP                 CheakMiddle_Left
   557 012A9                 CheakTop_Left:
   558 012A9 18FF          	MOV                 A,@0XFF   ;up
   559 012AA 16B3          	JMP                 CheakAreaFinish_Left
   560 012AB                 CheakMiddle_Left:
   561 012AB 0400          	MOV                 A,TEMP1
***     error A010:The symbol TEMP1 is not defined.
   562 012AC 1D40          	SUB                 A,@0X40
   563 012AD 0C00          	JBC                 R3,0
***     error A010:The symbol R3 is not defined.
   564 012AE 16B1          	JMP                 CheakBottom_Left
   565 012AF 187F          	MOV                 A,@0X7F
   566 012B0 16B3          	JMP                 CheakAreaFinish_Left
   567 012B1                 CheakBottom_Left:
   568 012B1 1800          	MOV                 A,@0X00   ;down
   569 012B2 16B3          	JMP                 CheakAreaFinish_Left
   570 012B3                 CheakAreaFinish_Left:
   571 012B3 0000          	NOP
   572 012B4 0000          	NOP
   573 012B5 0012          	RET
   574 012B6 0000          	NOP
   575                     
   576                     ;============================jugde what button press============================
   577                     ;input:     TEMP2,TEMP3
   578                     ;output:    TEMP
   579                     ;===============================================================================
   580 012B7               AreaJudge_Button:
   581 012B7 1E02          	BANK                2
   582 012B8 0400          	MOV                 A,TEMP2    ;KEY_RIGHT_Y
***     error A010:The symbol TEMP2 is not defined.
   583 012B9 1DD0          	SUB                 A,@0XD0
   584 012BA 0E00          	JBS                 R3,C	     ;R3,bit0(C)
***     error A010:The symbol C is not defined.
***     error A010:The symbol R3 is not defined.
   585 012BB 16BD          	JMP                 CheakTop_Right_y
   586 012BC 16BF          	JMP                 CheakMiddle_Right_y
   587                     
   588 012BD                 CheakTop_Right_y:
   589 012BD 18FF          	MOV                 A,@0XFF  ;up
   590 012BE 16C7          	JMP                 CheakAreaFinish_Right_y
   591 012BF                 CheakMiddle_Right_y:
   592 012BF 0400          	MOV                 A,TEMP2
***     error A010:The symbol TEMP2 is not defined.
   593 012C0 1D25          	SUB                 A,@0X25
   594 012C1 0E00          	JBS                 R3,C
***     error A010:The symbol C is not defined.
***     error A010:The symbol R3 is not defined.
   595 012C2 16C5          	JMP                 CheakBottom_Right_y
   596 012C3 1800          	MOV                 A,@0X00  ;dwon
   597 012C4 16C7          	JMP                 CheakAreaFinish_Right_y
   598 012C5                 CheakBottom_Right_y:
   599 012C5 187F          	MOV                 A,@0X7F
   600 012C6 16C7          	JMP                 CheakAreaFinish_Right_y
   601 012C7                 CheakAreaFinish_Right_y:
   602 012C7 0040          	MOV                 TEMP2,A
***     error A010:The symbol TEMP2 is not defined.
   603 012C8 0000          	NOP
   604                     ;---------------------------------------------------
   605 012C9 1E02          	BANK                2
   606 012CA 0400          	MOV                 A,TEMP3    ;KEY_RIGHT_Y
***     error A010:The symbol TEMP3 is not defined.
   607 012CB 1DD0          	SUB                 A,@0XD0
   608 012CC 0E00          	JBS                 R3,C       ;R3,bit0(C)
***     error A010:The symbol C is not defined.
***     error A010:The symbol R3 is not defined.
   609 012CD 16CF          	JMP                 CheakTop_Right_x
   610 012CE 16D1          	JMP                 CheakMiddle_Right_x
   611 012CF                 CheakTop_Right_x:
   612 012CF 18FF          	MOV                 A,@0XFF   ;right
   613 012D0 16D9          	JMP                 CheakAreaFinish_Right_x
   614 012D1                 CheakMiddle_Right_x:
   615 012D1 0400          	MOV                 A,TEMP3
***     error A010:The symbol TEMP3 is not defined.
   616 012D2 1D25          	SUB                 A,@0X25
   617 012D3 0E00          	JBS                 R3,0
***     error A010:The symbol R3 is not defined.
   618 012D4 16D7          	JMP                 CheakBottom_Right_x
   619 012D5 1800          	MOV                 A,@0X00   ;left
   620 012D6 16D9          	JMP                 CheakAreaFinish_Right_x
   621 012D7                 CheakBottom_Right_x:
   622 012D7 187F          	MOV                 A,@0X7F
   623 012D8 16D9          	JMP                 CheakAreaFinish_Right_x
   624 012D9                 CheakAreaFinish_Right_x:
   625 012D9 0040          	MOV                 TEMP3,A
***     error A010:The symbol TEMP3 is not defined.
   626 012DA 0000          	NOP
   627                     
   628                     ;-----------------------------------------------------
   629 012DB 00C0          	CLR                 TEMP
***     error A010:The symbol TEMP is not defined.
   630 012DC 0400          	MOV                 A,TEMP2      ;left
***     error A010:The symbol TEMP2 is not defined.
   631 012DD 1B00          	XOR                 A,@0X00
   632 012DE 0C00          	JBC                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   633 012DF 0A00          	BS                  TEMP,A_1
***     error A010:The symbol TEMP is not defined.
   634                     
   635 012E0 0400          	MOV                 A,TEMP2      ;right
***     error A010:The symbol TEMP2 is not defined.
   636 012E1 1BFF          	XOR                 A,@0XFF
   637 012E2 0C00          	JBC                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   638 012E3 0A80          	BS                  TEMP,C_3
***     error A010:The symbol TEMP is not defined.
   639                     
   640 012E4 0400          	MOV                 A,TEMP3      ;down
***     error A010:The symbol TEMP3 is not defined.
   641 012E5 1BFF          	XOR                 A,@0XFF
   642 012E6 0C00          	JBC                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   643 012E7 0AC0          	BS                  TEMP,D_4
***     error A010:The symbol TEMP is not defined.
   644                     
   645 012E8 0400          	MOV                 A,TEMP3      ;up
***     error A010:The symbol TEMP3 is not defined.
   646 012E9 1B00          	XOR                 A,@0X00
   647 012EA 0C00          	JBC                 STATUS,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
   648 012EB 0A40          	BS                  TEMP,B_2
***     error A010:The symbol TEMP is not defined.
   649 012EC 0012          	RET
   650 012ED 0000          	NOP
   651                     
   652                     ;===================================================================
   653 012EE               SUB_ADJ:
   654 012EE 1E03          	BANK                3
   655 012EF 0A00          	BS                  ADICH,CALI    ;ENABLE CALIBRATION
***     error A010:The symbol CALI is not defined.
***     error A010:The symbol ADICH is not defined.
   656 012F0                 ADCJUDGE_LOOP:
   657 012F0 0A00          	BS                  ADCR,ADRUN
***     error A010:The symbol ADRUN is not defined.
***     error A010:The symbol ADCR is not defined.
   658 012F1 0C00          	JBC                 ADCR,ADRUN
***     error A010:The symbol ADRUN is not defined.
***     error A010:The symbol ADCR is not defined.
   659 012F2 16F1          	JMP                 $-1
   660                     
   661 012F3 0400          	MOV                 A,ADDL
***     error A010:The symbol ADDL is not defined.
   662 012F4 1A0F          	AND                 A,@0X0F
   663 012F5 0E00          	JBS                 R3,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol R3 is not defined.
   664 012F6 16FD          	JMP                 ADCJUDGE_DONE
   665 012F7 0400          	MOV                 A,ADDH
***     error A010:The symbol ADDH is not defined.
   666 012F8 0E00          	JBS                 R3,Z
***     error A010:The symbol Z is not defined.
***     error A010:The symbol R3 is not defined.
   667 012F9 16FD          	JMP                 ADCJUDGE_DONE
   668 012FA 1810          	MOV                 A,@0X10
   669 012FB 03C0          	ADD                 ADDL,A
***     error A010:The symbol ADDL is not defined.
   670 012FC 16F0          	JMP                 ADCJUDGE_LOOP
   671 012FD                 ADCJUDGE_DONE:
   672 012FD 0800          	BC                  ADICH,CALI
***     error A010:The symbol CALI is not defined.
***     error A010:The symbol ADICH is not defined.
   673 012FE 0012          	RET
   674 012FF 0000          	NOP
   675                     
   676                     ;===================================================================
   677 01300               SUB_RINIT:
   678 01300 1E03          	BANK                3
   679 01301 180F          	MOV                 A,@0X0F
   680 01302 0040          	MOV                 ADICL,A      ;SELECT ADE0~ ADE3 AS ANALOG INPUT
***     error A010:The symbol ADICL is not defined.
   681 01303 00C0          	CLR                 ADICH         ;VREFS==VDD
***     error A010:The symbol ADICH is not defined.
   682 01304 1860          	MOV                 A,@0B01100000
   683 01305 0040          	MOV                 ADCR,A       ;SELECT  AD0,SELECT ADCKR1/ADCKR0=1:0,ADP=1
***     error A010:The symbol ADCR is not defined.
   684 01306 0012          	RET
   685 01307 0000          	NOP
   686                     
   687                     ;===================================================================
   688 01308               SUB_ADC:
   689 01308 1E03          	BANK                3
   690 01309 0A00          	BS                  ADCR,ADRUN
***     error A010:The symbol ADRUN is not defined.
***     error A010:The symbol ADCR is not defined.
   691 0130A 0C00          	JBC                 ADCR,ADRUN
***     error A010:The symbol ADRUN is not defined.
***     error A010:The symbol ADCR is not defined.
   692 0130B 170A          	JMP                 $-1
   693 0130C 0000          	NOP
   694 0130D 0012          	RET
   695 0130E 0000          	NOP
   696                     
   697                     
   698                     
   699                     ;============================================================================
   700                     ;file name:     IO 3D Rocker KeyScan
   701                     ;INPUT PORT:
   702                     ;OUTPUT PORT:   KEY_LEFT_X,KEY_LEFT_Y,KEY_RIGHT_X,KEY_RIGHT_Y
   703                     ;TIME:
   704                     ;Descrition:    Use for check AD rocker data
   705                     ;============================================================================
   706 0130F               IO_Rocker_KeyScan:
   707 0130F 0000          	NOP
   708 01310 1329          	CALL                Pre_Discharge
   709 01311 134F          	CALL                SampingRefTiming   ; Ref
   710 01312 1329          	CALL                Pre_Discharge
   711 01313 0000          	NOP
   712 01314 0000          	NOP
   713                     	
   714 01315 1367          	CALL                SampingLyTiming    ; Ly
   715 01316 0000          	NOP
   716 01317 0000          	NOP
   717                     
   718 01318 1329          	CALL                Pre_Discharge
   719 01319 0000          	NOP
   720 0131A 0000          	NOP	
   721                     	
   722 0131B 1380          	CALL                SampingLxTiming    ; Lx
   723 0131C 1329          	CALL                Pre_Discharge
   724 0131D 0000          	NOP
   725 0131E 0000          	NOP	
   726                     	
   727 0131F 1399          	CALL                SampingRyTiming    ; Ry
   728 01320 1329          	CALL                Pre_Discharge
   729 01321 0000          	NOP
   730 01322 0000          	NOP	
   731                     	
   732 01323 13B4          	CALL                SampingRxTiming    ; Rx
   733 01324 1340          	CALL                Back_Discharge
   734                     
   735 01325 0000          	NOP
   736 01326 0000          	NOP
   737 01327 0012          	RET
   738 01328 0000          	NOP
   739                     
   740                     ;---------------------------------------------------------------
   741 01329               Pre_Discharge:
   742 01329 1E04          	BANK                4	
   743 0132A 18FF          	MOV                 A,@0B11111111
   744 0132B 0040          	MOV                 P9IOCR,A             ; P97-P94:Input; P93-P90:Input
***     error A010:The symbol P9IOCR is not defined.
   745 0132C 0B80          	BS                  P8IOCR,Leakresis     ; Input P86
***     error A010:The symbol P8IOCR is not defined.
   746 0132D 0BC0          	BS                  P8IOCR,Reference     ; Input P87
***     error A010:The symbol P8IOCR is not defined.
   747                     	;MOV                 A,P8IOCR
   748                     	;AND                 A,@0B00111111
   749                     	;OR                  A,@0B11000000
   750                     	;MOV                 P8IOCR,A            ; Set P87->Input,P86->Input
   751                     
   752 0132E 18F0          	MOV                 A,@0B11110000
   753 0132F 0040          	MOV                 P9IOCR,A             ; P97-P94:Input; P93-P90:Output
***     error A010:The symbol P9IOCR is not defined.
   754 01330 0980          	BC                  P8IOCR,Leakresis     ; Output P86
***     error A010:The symbol P8IOCR is not defined.
   755 01331 09C0          	BC                  P8IOCR,Reference     ; Output P87
***     error A010:The symbol P8IOCR is not defined.
   756                     	;MOV                 A,P8IOCR
   757                     	;AND                 A,@0B00111111
   758                     	;OR                  A,@0B00000000
   759                     	;MOV                 P8IOCR,A            ; Set P87->Output,P86->Output
   760 01332 1E00          	BANK                0
   761 01333 00C0          	CLR                 PORT9
***     error A010:The symbol PORT9 is not defined.
   762                     	;BC                  PORT9,LeftYAxis
   763                     	;BC                  PORT9,LeftXAxis
   764                     	;BC                  PORT9,RightYAxis
   765                     	;BC                  PORT9,RightXAxis
   766 01334 0980          	BC                  PORT8,Leakresis     ; Set P86 Low
***     error A010:The symbol PORT8 is not defined.
   767 01335 09C0          	BC                  PORT8,Reference     ; Set P87 Low
***     error A010:The symbol PORT8 is not defined.
   768                     
   769 01336 1E02          	BANK                2
   770 01337 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   771 01338 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   772 01339 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   773 0133A 1D0A          	SUB                 A,@LeakresisTimeCNT
   774 0133B 0C00          	JBC                 STATUS,C
***     error A010:The symbol C is not defined.
***     error A010:The symbol STATUS is not defined.
   775 0133C 1739          	JMP                 $-3
   776 0133D 0800          	BC                  T2CR,T2EN          ; Disable
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   777 0133E 0012          	RET
   778 0133F 0000          	NOP
   779                     
   780 01340               Back_Discharge:
   781 01340 1E04          	BANK                4
   782 01341 18FF          	MOV                 A,@0B11111111
   783 01342 0040          	MOV                 P9IOCR,A             ; P97-P94:Input; P93-P90:Input
***     error A010:The symbol P9IOCR is not defined.
   784 01343 0B80          	BS                  P8IOCR,Leakresis     ; Input P86
***     error A010:The symbol P8IOCR is not defined.
   785 01344 0BC0          	BS                  P8IOCR,Reference     ; Input P87
***     error A010:The symbol P8IOCR is not defined.
   786                     	;MOV                 A,P8IOCR
   787                     	;AND                 A,@0B00111111
   788                     	;OR                  A,@0B11000000
   789                     	;MOV                 P8IOCR,A            ; Set P87->Input,P86->Input
   790                     
   791 01345 18F0          	MOV                 A,@0B11110000
   792 01346 0040          	MOV                 P9IOCR,A             ; P97-P94:Input; P93-P90:Output
***     error A010:The symbol P9IOCR is not defined.
   793 01347 0980          	BC                  P8IOCR,Leakresis     ; Output P86
***     error A010:The symbol P8IOCR is not defined.
   794 01348 09C0          	BC                  P8IOCR,Reference     ; Output P87
***     error A010:The symbol P8IOCR is not defined.
   795                     	;MOV                 A,P8IOCR
   796                     	;AND                 A,@0B00111111
   797                     	;OR                  A,@0B10000000
   798                     	;MOV                 P8IOCR,A            ; Set P87->Input,P86->Output
   799 01349 1E00          	BANK                0
   800 0134A 00C0          	CLR                 PORT9
***     error A010:The symbol PORT9 is not defined.
   801                     	;BC                  PORT9,LeftYAxis
   802                     	;BC                  PORT9,LeftXAxis
   803                     	;BC                  PORT9,RightYAxis
   804                     	;BC                  PORT9,RightXAxis
   805 0134B 0980          	BC                  PORT8,Leakresis     ; Set P86 Low
***     error A010:The symbol PORT8 is not defined.
   806 0134C 09C0          	BC                  PORT8,Reference     ; Set P87 Low
***     error A010:The symbol PORT8 is not defined.
   807 0134D 0012          	RET
   808 0134E 0000          	NOP
   809                     
   810                     ;---------------------------------------------------------------
   811 0134F               SampingRefTiming:
   812 0134F 1E04          	BANK                4
   813 01350 18FF          	MOV                 A,@0B11111111
   814 01351 0040          	MOV                 P9IOCR,A            ; P97-P94:Input; P93-P90:Input
***     error A010:The symbol P9IOCR is not defined.
   815 01352 0B80          	BS                  P8IOCR,Leakresis    ; Input  P86
***     error A010:The symbol P8IOCR is not defined.
   816 01353 09C0          	BC                  P8IOCR,Reference    ; Output P87
***     error A010:The symbol P8IOCR is not defined.
   817                     	;MOV                 A,P8IOCR
   818                     	;AND                 A,@0B00111111
   819                     	;OR                  A,@0B01000000
   820                     	;MOV                 P8IOCR,A           ; Set P87->Output,P86->Input
   821 01354 1E00          	BANK                0
   822                     	;BS                  PORT9,LeftYAxis
   823                     	;BS                  PORT9,LeftXAxis
   824                     	;BS                  PORT9,RightYAxis
   825                     	;BS                  PORT9,RightXAxis
   826                     	;BS                  PORT8,Leakresis    ; Set P86
   827 01355 0BC0          	BS                  PORT8,Reference     ; Set P87 High
***     error A010:The symbol PORT8 is not defined.
   828                     
   829 01356 00C0          	CLR                 IMR                ; Disable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   830 01357 1E02          	BANK                2
   831 01358 1803          	MOV                 A,@IOCheckRate     ; N=, Auto reload
   832 01359 0040          	MOV                 T2PD,A
***     error A010:The symbol T2PD is not defined.
   833 0135A 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   834 0135B 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   835 0135C 1E00          	BANK                0
   836 0135D 0F80          	JBS                 PORT8,Leakresis
***     error A010:The symbol PORT8 is not defined.
   837 0135E 175D          	JMP                 $-1
   838 0135F 1881          	MOV                 A,@0B10000001
   839 01360 0040          	MOV                 IMR,A             ; Enable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   840 01361 1E02          	BANK                2
   841 01362 0800          	BC                  T2CR,T2EN          ; Disable
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   842 01363 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   843 01364 0040          	MOV                 IOcheckRefValue,A
***     error A010:The symbol IOCHECKREFVALUE is not defined.
   844                     
   845 01365 0012          	RET
   846 01366 0000          	NOP
   847                     
   848                     ;---------------------------------------------------------------
   849 01367               SampingLyTiming:
   850 01367 1E04          	BANK                4
   851 01368 18FE          	MOV                 A,@0B11111110
   852 01369 0040          	MOV                 P9IOCR,A            ; P97-P91:Input; P90:output
***     error A010:The symbol P9IOCR is not defined.
   853 0136A 0B80          	BS                  P8IOCR,Leakresis    ; input P86
***     error A010:The symbol P8IOCR is not defined.
   854 0136B 0BC0          	BS                  P8IOCR,Reference    ; input P87
***     error A010:The symbol P8IOCR is not defined.
   855                     	;MOV                 A,P8IOCR
   856                     	;AND                 A,@0B00111111
   857                     	;OR                  A,@0B11000000
   858                     	;MOV                 P8IOCR,A
   859 0136C 1E00          	BANK                0
   860 0136D 0A00          	BS                  PORT9,LeftYAxis     ; Set P90 HIGH
***     error A010:The symbol PORT9 is not defined.
   861                     	;BS                  PORT9,LeftXAxis
   862                     	;BS                  PORT9,RightYAxis
   863                     	;BS                  PORT9,RightXAxis
   864                     	;BS                  PORT8,Reference    ; Set P87
   865                     	;BS                  PORT8,Leakresis    ; Set P86
   866                     
   867 0136E 00C0          	CLR                 IMR                ; Disable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   868 0136F 1E02          	BANK                2
   869 01370 1803          	MOV                 A,@IOCheckRate     ; N=, Auto reload
   870 01371 0040          	MOV                 T2PD,A
***     error A010:The symbol T2PD is not defined.
   871 01372 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   872 01373 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   873 01374 1E00          	BANK                0
   874 01375 0F80          	JBS                 PORT8,Leakresis
***     error A010:The symbol PORT8 is not defined.
   875 01376 1775          	JMP                 $-1
   876 01377 1881          	MOV                 A,@0B10000001
   877 01378 0040          	MOV                 IMR,A             ; Enable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   878 01379 1E02          	BANK                2
   879 0137A 0800          	BC                  T2CR,T2EN           ; Disable
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   880 0137B 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   881 0137C 13CE          	CALL                IO_Data_Operation
   882 0137D 0040          	MOV                 KEY_LEFT_Y,A        ; Left y Axis
***     error A010:The symbol KEY_LEFT_Y is not defined.
   883 0137E 0012          	RET
   884 0137F 0000          	NOP
   885                     
   886                     ;---------------------------------------------------------------
   887 01380               SampingLxTiming:
   888 01380 1E04          	BANK                4
   889 01381 18FD          	MOV                 A,@0B11111101
   890 01382 0040          	MOV                 P9IOCR,A            ; P97-P92:Input; P91:output; P90:Input
***     error A010:The symbol P9IOCR is not defined.
   891 01383 0B80          	BS                  P8IOCR,Leakresis    ; input
***     error A010:The symbol P8IOCR is not defined.
   892 01384 0BC0          	BS                  P8IOCR,Reference    ; input
***     error A010:The symbol P8IOCR is not defined.
   893                     	;MOV                 A,P8IOCR
   894                     	;AND                 A,@0B00111111
   895                     	;OR                  A,@0B11000000
   896                     	;MOV                 P8IOCR,A
   897 01385 1E00          	BANK                0
   898                     	;BS                  PORT9,LeftYAxis
   899 01386 0A40          	BS                  PORT9,LeftXAxis     ; Set P91 HIGH
***     error A010:The symbol PORT9 is not defined.
   900                     	;BS                  PORT9,RightYAxis
   901                     	;BS                  PORT9,RightXAxis
   902                     	;BS                  PORT8,Reference    ; Set P87
   903                     	;BS                  PORT8,Leakresis    ; Set P86
   904                     
   905 01387 00C0          	CLR                 IMR                ; Disable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   906 01388 1E02          	BANK                2
   907 01389 1803          	MOV                 A,@IOCheckRate     ; N=, Auto reload
   908 0138A 0040          	MOV                 T2PD,A
***     error A010:The symbol T2PD is not defined.
   909 0138B 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   910 0138C 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   911 0138D 1E00          	BANK                0
   912 0138E 0F80          	JBS                 PORT8,Leakresis
***     error A010:The symbol PORT8 is not defined.
   913 0138F 178E          	JMP                 $-1
   914 01390 1881          	MOV                 A,@0B10000001
   915 01391 0040          	MOV                 IMR,A             ; Enable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   916 01392 1E02          	BANK                2
   917 01393 0800          	BC                  T2CR,T2EN           ; Disable
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   918 01394 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   919 01395 13CE          	CALL                IO_Data_Operation
   920 01396 0040          	MOV                 KEY_LEFT_X,A        ; Left x Axis
***     error A010:The symbol KEY_LEFT_X is not defined.
   921 01397 0012          	RET
   922 01398 0000          	NOP
   923                     
   924                     ;---------------------------------------------------------------
   925 01399               SampingRyTiming:
   926 01399 1E04          	BANK                4
   927 0139A 18FB          	MOV                 A,@0B11111011
   928 0139B 0040          	MOV                 P9IOCR,A            ; P97-P93:Input; P92:output; P91-P90:Input
***     error A010:The symbol P9IOCR is not defined.
   929 0139C 0B80          	BS                  P8IOCR,Leakresis    ; input
***     error A010:The symbol P8IOCR is not defined.
   930 0139D 0BC0          	BS                  P8IOCR,Reference    ; input
***     error A010:The symbol P8IOCR is not defined.
   931                     	;MOV                 A,P8IOCR
   932                     	;AND                 A,@0B00111111
   933                     	;OR                  A,@0B11000000
   934                     	;MOV                 P8IOCR,A
   935 0139E 1E00          	BANK                0
   936                     	;BS                  PORT9,LeftYAxis
   937                     	;BS                  PORT9,LeftXAxis
   938 0139F 0A80          	BS                  PORT9,RightYAxis    ; Set P92 HIGH
***     error A010:The symbol PORT9 is not defined.
   939                     	;BS                  PORT9,RightXAxis
   940                     	;BS                  PORT8,Reference    ; Set P87
   941                     	;BS                  PORT8,Leakresis    ; Set P86
   942                     
   943 013A0 00C0          	CLR                 IMR                ; Disable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   944 013A1 1E02          	BANK                2
   945 013A2 1803          	MOV                 A,@IOCheckRate     ; N=, Auto reload
   946 013A3 0040          	MOV                 T2PD,A
***     error A010:The symbol T2PD is not defined.
   947 013A4 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   948 013A5 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   949 013A6 1E00          	BANK                0
   950 013A7 0F80          	JBS                 PORT8,Leakresis
***     error A010:The symbol PORT8 is not defined.
   951 013A8 17A7          	JMP                 $-1
   952 013A9 1881          	MOV                 A,@0B10000001
   953 013AA 0040          	MOV                 IMR,A             ; Enable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   954 013AB 1E02          	BANK                2
   955 013AC 0800          	BC                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   956 013AD 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   957 013AE 0040          	MOV                 KEY_RIGHT_Y,A
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   958 013AF 13CE          	CALL                IO_Data_Operation
   959 013B0 0040          	MOV                 KEY_RIGHT_Y,A       ; right y Axis
***     error A010:The symbol KEY_RIGHT_Y is not defined.
   960                     	;COM                 KEY_RIGHT_Y
   961 013B1 0000          	NOP
   962 013B2 0012          	RET
   963 013B3 0000          	NOP
   964                     
   965                     ;---------------------------------------------------------------
   966 013B4               SampingRxTiming:
   967 013B4 1E04          	BANK                4
   968 013B5 18F7          	MOV                 A,@0B11110111
   969 013B6 0040          	MOV                 P9IOCR,A            ; P97-P94:Input; P93:output; P92-P90:Input
***     error A010:The symbol P9IOCR is not defined.
   970 013B7 0B80          	BS                  P8IOCR,Leakresis    ; input
***     error A010:The symbol P8IOCR is not defined.
   971 013B8 0BC0          	BS                  P8IOCR,Reference    ; input
***     error A010:The symbol P8IOCR is not defined.
   972                     	;MOV                 A,P8IOCR
   973                     	;AND                 A,@0B00111111
   974                     	;OR                  A,@0B11000000
   975                     	;MOV                 P8IOCR,A
   976 013B9 1E00          	BANK                0
   977                     	;BS                  PORT9,LeftYAxis
   978                     	;BS                  PORT9,LeftXAxis
   979                     	;BS                  PORT9,RightYAxis
   980 013BA 0AC0          	BS                  PORT9,RightXAxis    ; Set P93 HIGH
***     error A010:The symbol PORT9 is not defined.
   981                     	;BS                  PORT8,Reference    ; Set P87
   982                     	;BS                  PORT8,Leakresis    ; Set P86
   983                     
   984 013BB 00C0          	CLR                 IMR                ; Disable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   985 013BC 1E02          	BANK                2
   986 013BD 1803          	MOV                 A,@IOCheckRate     ; N=, Auto reload
   987 013BE 0040          	MOV                 T2PD,A
***     error A010:The symbol T2PD is not defined.
   988 013BF 0A00          	BS                  T2CR,T2EN          ; START
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   989 013C0 00C0          	CLR                 IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   990 013C1 1E00          	BANK                0
   991 013C2 0F80          	JBS                 PORT8,Leakresis
***     error A010:The symbol PORT8 is not defined.
   992 013C3 17C2          	JMP                 $-1
   993 013C4 1881          	MOV                 A,@0B10000001
   994 013C5 0040          	MOV                 IMR,A             ; Enable Timier1/TCC
***     error A010:The symbol IMR is not defined.
   995 013C6 1E02          	BANK                2
   996 013C7 0800          	BC                  T2CR,T2EN           ; Disable
***     error A010:The symbol T2EN is not defined.
***     error A010:The symbol T2CR is not defined.
   997 013C8 0400          	MOV                 A,IOcheckTimeCNT
***     error A010:The symbol IOCHECKTIMECNT is not defined.
   998 013C9 13CE          	CALL                IO_Data_Operation
   999 013CA 0040          	MOV                 KEY_RIGHT_X,A       ; right x Axis
***     error A010:The symbol KEY_RIGHT_X is not defined.
  1000 013CB 0000          	NOP
  1001 013CC 0012          	RET
  1002 013CD 0000          	NOP
  1003                     
  1004                     ;=======================================================================
  1005                     ; input:        ACC
  1006                     ; output:       ACC
  1007                     ; registor:     TEMP, TEMP1, TEMP2
  1008                     ; descripition: Operate io data change to anylize data. Kr=0x80(2^7)
  1009                     ;=======================================================================
  1010 013CE               IO_Data_Operation:
  1011 013CE 00C0          	CLR                 TEMP1
***     error A010:The symbol TEMP1 is not defined.
  1012 013CF 00C0          	CLR                 TEMP2
***     error A010:The symbol TEMP2 is not defined.
  1013 013D0 0040          	MOV                 TEMP2,A
***     error A010:The symbol TEMP2 is not defined.
  1014 013D1 0800          	BC                  STATUS,C
***     error A010:The symbol C is not defined.
***     error A010:The symbol STATUS is not defined.
  1015 013D2 0640          	RRC                 TEMP2
***     error A010:The symbol TEMP2 is not defined.
  1016 013D3 0640          	RRC                 TEMP1
***     error A010:The symbol TEMP1 is not defined.
  1017 013D4 0400          	MOV                 A,IOcheckRefValue
***     error A010:The symbol IOCHECKREFVALUE is not defined.
  1018 013D5 0040          	MOV                 TEMP,A
***     error A010:The symbol TEMP is not defined.
  1019                     
  1020                   M 	mDIV2_1             TEMP2,TEMP1,TEMP
       013D6 1810     1     MOV A,@( 16 )
       013D7 0040     1     MOV  REG_ACC ,A
***     error A038:The symbol REG_ACC is not extern symbol.
       013D8 0080     1     CLRA 
       013D9 0200     1     OR A, TEMP 
***     error A010:The symbol TEMP is not defined.
       013DA 0C00     1     JBC  STATUS , Z 
***     error A010:The symbol Z is not defined.
***     error A010:The symbol STATUS is not defined.
       013DB 17ED     1     JMP  ??001D$_DIV_OUT ,
       013DC 00C0     1     CLR  TEMP ,
***     error A010:The symbol TEMP is not defined.
       013DD          1    ??001D$_DIV_SUB:   
       013DD 06C0     1     RLC  TEMP1 ,
***     error A010:The symbol TEMP1 is not defined.
       013DE 06C0     1     RLC  TEMP2 ,
***     error A010:The symbol TEMP2 is not defined.
       013DF 06C0     1     RLC  TEMP ,
***     error A010:The symbol TEMP is not defined.
       013E0 0A00     1     BS  TEMP1 , 0 
***     error A010:The symbol TEMP1 is not defined.
       013E1 0E00     1     JBS  STATUS , C 
***     error A010:The symbol C is not defined.
***     error A010:The symbol STATUS is not defined.
       013E2 17E5     1     JMP  ??001D$_DIV_S_0 ,
       013E3 0140     1     SUB  TEMP ,A
***     error A010:The symbol TEMP is not defined.
       013E4 17EA     1     JMP  ??001D$_DIV_CNT ,
       013E5          1    ??001D$_DIV_S_0:   
       013E5 0140     1     SUB  TEMP ,A
***     error A010:The symbol TEMP is not defined.
       013E6 0C00     1     JBC  STATUS , C 
***     error A010:The symbol C is not defined.
***     error A010:The symbol STATUS is not defined.
       013E7 17EA     1     JMP  ??001D$_DIV_CNT ,
       013E8 0800     1     BC  TEMP1 , 0 
***     error A010:The symbol TEMP1 is not defined.
       013E9 03C0     1     ADD  TEMP ,A
***     error A010:The symbol TEMP is not defined.
       013EA          1    ??001D$_DIV_CNT:   
       013EA 05C0     1     DJZ  REG_ACC ,
***     error A038:The symbol REG_ACC is not extern symbol.
       013EB 17DD     1     JMP  ??001D$_DIV_SUB ,
       013EC 1801     1     MOV A,@( 1 )
       013ED          1    ??001D$_DIV_OUT:   
  1021 013ED 0400          	MOV                 A,TEMP1
***     error A010:The symbol TEMP1 is not defined.
  1022                     
  1023 013EE 0000          	NOP
  1024 013EF 0012          	RET
  1025 013F0 0000          	NOP
  1026                     
  415 Error(s), 0 Warning(s), 1 User Message(s)